<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="DatabaseLibrary" type="LIBRARY" format="ROBOT" scope="GLOBAL" namedargs="true" generated="2024-09-24T11:36:23Z" specversion="2" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\__init__.py" lineno="25">
<version />
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>The Database Library for [https://robotframework.org|Robot Framework] allows you to query a database and verify the results.
It requires an appropriate *Python module to be installed separately* - depending on your database, like e.g. `oracledb` or `pymysql`.

== Requirements ==
- Python
- Robot Framework
- Python database module you're going to use - e.g. `oracledb`

== Installation ==
| pip install robotframework-databaselibrary
Don't forget to install the required Python database module!

== Usage example ==
=== Basic usage ===
| *** Settings ***
| Library       DatabaseLibrary
| Test Setup    Connect To My Oracle DB
|
| *** Keywords ***
| Connect To My Oracle DB
|     Connect To Database
|     ...    oracledb
|     ...    dbName=db
|     ...    dbUsername=my_user
|     ...    dbPassword=my_pass
|     ...    dbHost=127.0.0.1
|     ...    dbPort=1521
|
| *** Test Cases ***
| Person Table Contains Expected Records
|     ${output}=    Query    select LAST_NAME from person
|     Length Should Be    ${output}    2
|     Should Be Equal    ${output}[0][0]    See
|     Should Be Equal    ${output}[1][0]    Schneider
|
| Person Table Contains No Joe
|     ${sql}=    Catenate    SELECT id FROM person
|     ...                    WHERE FIRST_NAME= 'Joe'
|     Check If Not Exists In Database    ${sql}
|

=== Handling multiple database connections ===
| *** Settings ***
| Library          DatabaseLibrary
| Test Setup       Connect To All Databases
| Test Teardown    Disconnect From All Databases
|
| *** Keywords ***
| Connect To All Databases
|     Connect To Database    psycopg2    db    db_user    pass    127.0.0.1    5432
|     ...    alias=postgres
|     Connect To Database    pymysql    db    db_user    pass    127.0.0.1    3306
|     ...    alias=mysql
|
| *** Test Cases ***
| Using Aliases
|     ${names}=    Query    select LAST_NAME from person    alias=postgres
|     Execute Sql String    drop table XYZ                  alias=mysql
|
| Switching Default Alias
|     Switch Database    postgres
|     ${names}=    Query    select LAST_NAME from person
|     Switch Database    mysql
|     Execute Sql String    drop table XYZ
|
== Database modules compatibility ==
The library is basically compatible with any [https://peps.python.org/pep-0249|Python Database API Specification 2.0] module.

However, the actual implementation in existing Python modules is sometimes quite different, which requires custom handling in the library.
Therefore, there are some modules, which are "natively" supported in the library - and others, which may work and may not.

See more on the [https://github.com/MarketSquare/Robotframework-Database-Library|project page on GitHub].</doc>
<kw name="Call Stored Procedure" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\query.py" lineno="407">
<arguments>
<arg>spName: str</arg>
<arg>spParams: typing.List[str] = None</arg>
<arg>sansTran: bool = False</arg>
<arg>alias: str = None</arg>
</arguments>
<doc>Calls a stored procedure `spName` with the `spParams` - a *list* of parameters the procedure requires.
Use the special *CURSOR* value for OUT params, which should receive result sets -
they will be converted to appropriate DB variables before calling the procedure.
This is necessary only for some databases (e.g. Oracle or PostgreSQL).

The keywords always *returns two lists*:
- *Param values* - the copy of procedure parameters (modified, if the procedure changes the OUT params).
The list is empty, if procedures receives no params.
- *Result sets* - the list of lists, each of them containing results of some query, if the procedure
returns them or put them in the OUT params of type *CURSOR* (like in Oracle or PostgreSQL).

It also depends on the database, how the procedure returns the values - as params or as result sets.
E.g. calling a procedure in *PostgreSQL* returns even a single value of an OUT param as a result set.

Simple example:
| @{Params} = | Create List | Jerry | out_second_name |
| @{Param values}    @{Result sets} = | Call Stored Procedure | Get_second_name | ${Params} |
| # ${Param values} = ['Jerry', 'Schneider'] |
| # ${result sets} = [] |

Example with a single CURSOR parameter (Oracle DB):
| @{Params} = | Create List | CURSOR |
| @{Param values}    @{Result sets} = | Call Stored Procedure | Get_all_second_names | ${Params} |
| # ${Param values} = [&lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;] |
| # ${result sets} = [[('See',), ('Schneider',)]] |

Example with multiple CURSOR parameters (Oracle DB):
| @{Params} = | Create List | CURSOR | CURSOR |
| @{Param values}    @{Result sets} = | Call Stored Procedure | Get_all_first_and_second_names | ${Params} |
| # ${Param values} = [&lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;, &lt;oracledb.Cursor on &lt;oracledb.Connection ...&gt;&gt;] |
| # ${result sets} = [[('Franz Allan',), ('Jerry',)], [('See',), ('Schneider',)]] |

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional `sansTran` to run command without an explicit transaction commit or rollback:
| @{Param values}    @{Result sets} = | Call Stored Procedure | DBName.SchemaName.StoredProcName | ${Params} | True |</doc>
</kw>
<kw name="Check If Exists In Database" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="24">
<arguments>
<arg>selectStatement: str</arg>
<arg>sansTran: bool = False</arg>
<arg>msg: str = None</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>Check if any row would be returned by given the input ``selectStatement``. If there are no results, then this will
throw an AssertionError.

Set optional input ``sansTran`` to _True_ to run command without an explicit transaction
commit or rollback.

The default error message can be overridden with the ``msg`` argument.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client).

Examples:
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' |
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'John' | msg=my error message |
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' | alias=my_alias |
| Check If Exists In Database | SELECT id FROM person WHERE first_name = 'John' | sansTran=True |
| @{parameters} | Create List |  John |
| Check If Exists In Database | SELECT id FROM person WHERE first_name = %s | parameters=${parameters} |</doc>
</kw>
<kw name="Check If Not Exists In Database" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="61">
<arguments>
<arg>selectStatement: str</arg>
<arg>sansTran: bool = False</arg>
<arg>msg: str = None</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>This is the negation of `check_if_exists_in_database`.

Check if no rows would be returned by given the input ``selectStatement``. If there are any results, then this
will throw an AssertionError.

Set optional input ``sansTran`` to _True_ to run command without an explicit transaction commit or rollback.

The default error message can be overridden with the ``msg`` argument.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client).

Examples:
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'John' |
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' | msg=my error message |
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'Franz Allan' | alias=my_alias |
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = 'John' | sansTran=True |
| @{parameters} | Create List |  John |
| Check If Not Exists In Database | SELECT id FROM person WHERE first_name = %s | parameters=${parameters} |</doc>
</kw>
<kw name="Connect To Database" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="119">
<arguments>
<arg>dbapiModuleName: str = None</arg>
<arg>dbName: str = None</arg>
<arg>dbUsername: str = None</arg>
<arg>dbPassword: str = None</arg>
<arg>dbHost: str = None</arg>
<arg>dbPort: int = None</arg>
<arg>dbCharset: str = None</arg>
<arg>dbDriver: str = None</arg>
<arg>dbConfigFile: str = None</arg>
<arg>driverMode: str = None</arg>
<arg>alias: str = default</arg>
</arguments>
<doc>Loads the DB API 2.0 module given ``dbapiModuleName`` then uses it to
connect to the database using provided parameters such as ``dbName``, ``dbUsername``, and ``dbPassword``.

Optional ``alias`` parameter can be used for creating multiple open connections, even for different databases.
If the same alias is given twice then previous connection will be overriden.

The ``driverMode`` is used to select the *oracledb* client mode.
Allowed values are:
- _thin_ (default if omitted)
- _thick_
- _thick,lib_dir=&lt;PATH_TO_ORACLE_CLIENT&gt;_

Optionally, you can specify a ``dbConfigFile`` wherein it will load the
alias (or alias will be "default") property values for ``dbapiModuleName``, ``dbName`` ``dbUsername``
and ``dbPassword`` (note: specifying ``dbapiModuleName``, ``dbName``
`dbUsername` or `dbPassword` directly will override the properties of
the same key in `dbConfigFile`). If no `dbConfigFile` is specified, it
defaults to `./resources/db.cfg`.

The `dbConfigFile` is useful if you don't want to check into your SCM
your database credentials.

Example db.cfg file
| [alias]
| dbapiModuleName=pymysqlforexample
| dbName=yourdbname
| dbUsername=yourusername
| dbPassword=yourpassword
| dbHost=yourhost
| dbPort=yourport

Example usage:
| # explicitly specifies all db property values |
| Connect To Database | psycopg2 | my_db | postgres | s3cr3t | tiger.foobar.com | 5432 |
| Connect To Database | psycopg2 | my_db | postgres | s3cr3t | tiger.foobar.com | 5432 | alias=my_alias |

| # loads all property values from default.cfg |
| Connect To Database | dbConfigFile=default.cfg |

| # loads all property values from ./resources/db.cfg |
| Connect To Database |

| # uses explicit `dbapiModuleName` and `dbName` but uses the `dbUsername` and `dbPassword` in 'default.cfg' |
| Connect To Database | psycopg2 | my_db_test | dbConfigFile=default.cfg |

| # uses explicit `dbapiModuleName` and `dbName` but uses the `dbUsername` and `dbPassword` in './resources/db.cfg' |
| Connect To Database | psycopg2 | my_db_test |</doc>
</kw>
<kw name="Connect To Database Using Custom Connection String" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="386">
<arguments>
<arg>dbapiModuleName: str = None</arg>
<arg>db_connect_string: str = </arg>
<arg>alias: str = default</arg>
</arguments>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the `db_connect_string`
(parsed as single connection string or URI).

Use `connect_to_database_using_custom_params` for passing
connection params as named arguments.

Example usage:
| Connect To Database Using Custom Connection String | psycopg2 | postgresql://postgres:s3cr3t@tiger.foobar.com:5432/my_db_test |
| Connect To Database Using Custom Connection String | oracledb | username/pass@localhost:1521/orclpdb |</doc>
</kw>
<kw name="Connect To Database Using Custom Params" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="348">
<arguments>
<arg>dbapiModuleName: str = None</arg>
<arg>db_connect_string: str = </arg>
<arg>alias: str = default</arg>
</arguments>
<doc>Loads the DB API 2.0 module given `dbapiModuleName` then uses it to
connect to the database using the map string `db_connect_string`
(parsed as a list of named arguments).

Use `connect_to_database_using_custom_connection_string` for passing
all params in a single connection string or URI.

Example usage:
| Connect To Database Using Custom Params | psycopg2 | database='my_db_test', user='postgres', password='s3cr3t', host='tiger.foobar.com', port=5432 |
| Connect To Database Using Custom Params | jaydebeapi | 'oracle.jdbc.driver.OracleDriver', 'my_db_test', 'system', 's3cr3t' |
| Connect To Database Using Custom Params | oracledb | user="username", password="pass", dsn="localhost/orclpdb" |
| Connect To Database Using Custom Params | sqlite3 | database="./my_database.db", isolation_level=None |</doc>
</kw>
<kw name="Delete All Rows From Table" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\query.py" lineno="185">
<arguments>
<arg>tableName: str</arg>
<arg>sansTran: bool = False</arg>
<arg>alias: str = None</arg>
</arguments>
<doc>Delete all the rows within a given table.

Use optional `sansTran` to run command without an explicit transaction commit or rollback.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Examples:
| Delete All Rows From Table | person |
| Delete All Rows From Table | person | alias=my_alias |
| Delete All Rows From Table | person | sansTran=True |</doc>
</kw>
<kw name="Description" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\query.py" lineno="135">
<arguments>
<arg>selectStatement: str</arg>
<arg>sansTran: bool = False</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>Uses the input ``selectStatement`` to query a table in the db which will be used to determine the description.

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |

When you do the following:
| @{queryResults} | Description | SELECT * FROM person |
| @{queryResults} | Description | SELECT * FROM person | alias=my_alias |
| Log Many | @{queryResults} |

You will get the following:
[Column(name='id', type_code=1043, display_size=None, internal_size=255, precision=None, scale=None, null_ok=None)]
[Column(name='first_name', type_code=1043, display_size=None, internal_size=255, precision=None, scale=None, null_ok=None)]
[Column(name='last_name', type_code=1043, display_size=None, internal_size=255, precision=None, scale=None, null_ok=None)]

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client):
| @{parameters} | Create List |  person |
| ${desc} | Description | SELECT * FROM %s | parameters=${parameters} |

Using optional `sansTran` to run command without an explicit transaction commit or rollback:
| @{queryResults} | Description | SELECT * FROM person | True |</doc>
</kw>
<kw name="Disconnect From All Databases" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="432">
<arguments>
</arguments>
<doc>Disconnects from all the databases -
useful when testing with multiple database connections (aliases).

For example:
| Disconnect From All Databases | # Closes connections to all databases |</doc>
</kw>
<kw name="Disconnect From Database" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="410">
<arguments>
<arg>error_if_no_connection: bool = False</arg>
<arg>alias: str = None</arg>
</arguments>
<doc>Disconnects from the database.

By default, it's not an error if there was no open database connection -
suitable for usage as a teardown.
However, you can enforce it using the `error_if_no_connection` parameter.

Example usage:
| Disconnect From Database | # disconnects from current connection to the database |
| Disconnect From Database | alias=my_alias | # disconnects from current connection to the database |</doc>
</kw>
<kw name="Execute Sql Script" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\query.py" lineno="216">
<arguments>
<arg>sqlScriptFileName: str</arg>
<arg>sansTran: bool = False</arg>
<arg>alias: str = None</arg>
<arg>split: bool = True</arg>
</arguments>
<doc>Executes the content of the `sqlScriptFileName` as SQL commands. Useful for setting the database to a known
state before running your tests, or clearing out your test data after running each a test.

SQL commands are expected to be delimited by a semicolon (';') - they will be split and executed separately.
You can disable this behaviour setting the parameter `split` to _False_ -
in this case the entire script content will be passed to the database module for execution.

Sample usage :
| Execute Sql Script | ${EXECDIR}${/}resources${/}DDL-setup.sql |
| Execute Sql Script | ${EXECDIR}${/}resources${/}DML-setup.sql |
| Execute Sql Script | ${EXECDIR}${/}resources${/}DDL-setup.sql | alias=my_alias |
| #interesting stuff here |
| Execute Sql Script | ${EXECDIR}${/}resources${/}DML-teardown.sql |
| Execute Sql Script | ${EXECDIR}${/}resources${/}DDL-teardown.sql |


For example:
DELETE FROM person_employee_table;
DELETE FROM person_table;
DELETE FROM employee_table;

Also, the last SQL command can optionally omit its trailing semi-colon.

For example:
DELETE FROM person_employee_table;
DELETE FROM person_table;
DELETE FROM employee_table

Given this, that means you can create spread your SQL commands in several
lines.

For example:
DELETE
  FROM person_employee_table;
DELETE
  FROM person_table;
DELETE
  FROM employee_table

However, lines that starts with a number sign (`#`) or a double dash ("--")
are treated as a commented line. Thus, none of the contents of that line will be executed.


For example:
# Delete the bridging table first...
DELETE
  FROM person_employee_table;
  # ...and then the bridged tables.
DELETE
  FROM person_table;
DELETE
  FROM employee_table

The slash signs ("/") are always ignored and have no impact on execution order.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional `sansTran` to run command without an explicit transaction commit or rollback:
| Execute Sql Script | ${EXECDIR}${/}resources${/}DDL-setup.sql | True |</doc>
</kw>
<kw name="Execute Sql String" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\query.py" lineno="362">
<arguments>
<arg>sqlString: str</arg>
<arg>sansTran: bool = False</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
<arg>omitTrailingSemicolon: bool = None</arg>
</arguments>
<doc>Executes the ``sqlString`` as a single SQL command.

Use optional ``sansTran`` to run command without an explicit transaction commit or rollback.

Use optional ``omitTrailingSemicolon`` parameter for explicit instruction,
if the trailing semicolon (;) at the SQL string end should be removed or not:
- Some database modules (e.g. Oracle) throw an exception, if you leave a semicolon at the string end
- However, there are exceptional cases, when you need it even for Oracle - e.g. at the end of a PL/SQL block.
- If not specified, it's decided based on the current database module in use. For Oracle, the semicolon is removed by default.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client).

For example:
| Execute Sql String | DELETE FROM person_employee_table; DELETE FROM person_table |
| Execute Sql String | DELETE FROM person_employee_table; DELETE FROM person_table | alias=my_alias |
| Execute Sql String | DELETE FROM person_employee_table; DELETE FROM person_table | sansTran=True |
| Execute Sql String | CREATE PROCEDURE proc AS BEGIN DBMS_OUTPUT.PUT_LINE('Hello!'); END; | omitTrailingSemicolon=False |
| @{parameters} | Create List |  person_employee_table |
| Execute Sql String | SELECT * FROM %s | parameters=${parameters} |</doc>
</kw>
<kw name="Query" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\query.py" lineno="28">
<arguments>
<arg>selectStatement: str</arg>
<arg>sansTran: bool = False</arg>
<arg>returnAsDict: bool = False</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>Runs a query with the ``selectStatement`` and returns the result as a list of rows.
The type of row values depends on the database module -
usually they are tuples or tuple-like objects.

Set optional input ``returnAsDict`` to _True_ to explicitely convert the return values
into a list of dictionaries.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client):
| @{parameters} | Create List |  person |
| Query | SELECT * FROM %s | parameters=${parameters} |

Use optional ``sansTran`` to run command without an explicit transaction commit or rollback:
| @{queryResults} | Query | SELECT * FROM person | True |

Tip: Unless you want to log all column values of the specified rows,
try specifying the column names in your select statements
as much as possible to prevent any unnecessary surprises with schema
changes and to easily see what your [] indexing is trying to retrieve
(i.e. instead of `"select * from my_table"`, try
`"select id, col_1, col_2 from my_table"`).

For example, given we have a table `person` with the following data:
| id | first_name  | last_name |
|  1 | Franz Allan | See       |

When you do the following:
| @{queryResults} | Query | SELECT * FROM person |
| @{queryResults} | Query | SELECT * FROM person | alias=my_alias |
| Log Many | @{queryResults} |

You will get the following:
[1, 'Franz Allan', 'See']

Also, you can do something like this:
| ${queryResults} | Query | SELECT first_name, last_name FROM person |
| Log | ${queryResults[0][1]}, ${queryResults[0][0]} |

And get the following
See, Franz Allan</doc>
</kw>
<kw name="Row Count" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\query.py" lineno="96">
<arguments>
<arg>selectStatement: str</arg>
<arg>sansTran: bool = False</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>Uses the input ``selectStatement`` to query the database and returns the number of rows from the query.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``sansTran`` to run command without an explicit transaction commit or rollback:

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client):

Examples:
| ${rowCount} | Row Count | SELECT * FROM person |
| ${rowCount} | Row Count | SELECT * FROM person | sansTran=True |
| ${rowCount} | Row Count | SELECT * FROM person | alias=my_alias |
| @{parameters} | Create List |  person |
| ${rowCount} | Row Count | SELECT * FROM %s | parameters=${parameters} |</doc>
</kw>
<kw name="Row Count Is 0" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="100">
<arguments>
<arg>selectStatement: str</arg>
<arg>sansTran: bool = False</arg>
<arg>msg: str = None</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>Check if any rows are returned from the submitted ``selectStatement``. If there are, then this will throw an
AssertionError.

Set optional input ``sansTran`` to _True_ to run command without an explicit transaction commit or
rollback.

The default error message can be overridden with the ``msg`` argument.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client).

Examples:
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'Franz Allan' |
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'Franz Allan' | msg=my error message |
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'John' | alias=my_alias |
| Row Count is 0 | SELECT id FROM person WHERE first_name = 'John' | sansTran=True |
| @{parameters} | Create List |  John |
| Row Count is 0 | SELECT id FROM person WHERE first_name = %s | parameters=${parameters} |</doc>
</kw>
<kw name="Row Count Is Equal To X" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="136">
<arguments>
<arg>selectStatement: str</arg>
<arg>numRows: str</arg>
<arg>sansTran: bool = False</arg>
<arg>msg: str = None</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>Check if the number of rows returned from ``selectStatement`` is equal to the value submitted. If not, then this
will throw an AssertionError.

Set optional input ``sansTran`` to _True_ to run command without an explicit transaction commit or rollback.

The default error message can be overridden with the ``msg`` argument.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client).

Examples:
| Row Count Is Equal To X | SELECT id FROM person | 1 |
| Row Count Is Equal To X | SELECT id FROM person | 3 | msg=my error message |
| Row Count Is Equal To X | SELECT id FROM person WHERE first_name = 'John' | 0 | alias=my_alias |
| Row Count Is Equal To X | SELECT id FROM person WHERE first_name = 'John' | 0 | sansTran=True |
| @{parameters} | Create List |  John |
| Row Count Is Equal To X | SELECT id FROM person WHERE first_name = %s | 0 | parameters=${parameters} |</doc>
</kw>
<kw name="Row Count Is Greater Than X" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="174">
<arguments>
<arg>selectStatement: str</arg>
<arg>numRows: str</arg>
<arg>sansTran: bool = False</arg>
<arg>msg: str = None</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>Check if the number of rows returned from ``selectStatement`` is greater than the value submitted. If not, then
this will throw an AssertionError.

Set optional input ``sansTran`` to _True_ to run command without an explicit transaction commit or rollback.

The default error message can be overridden with the ``msg`` argument.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client).

Examples:
| Row Count Is Greater Than X | SELECT id FROM person WHERE first_name = 'John' | 0 |
| Row Count Is Greater Than X | SELECT id FROM person WHERE first_name = 'John' | 0 | msg=my error message |
| Row Count Is Greater Than X | SELECT id FROM person WHERE first_name = 'John' | 0 | alias=my_alias |
| Row Count Is Greater Than X | SELECT id FROM person | 1 | sansTran=True |
| @{parameters} | Create List |  John |
| Row Count Is Greater Than X | SELECT id FROM person WHERE first_name = %s | 0 | parameters=${parameters} |</doc>
</kw>
<kw name="Row Count Is Less Than X" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="212">
<arguments>
<arg>selectStatement: str</arg>
<arg>numRows: str</arg>
<arg>sansTran: bool = False</arg>
<arg>msg: str = None</arg>
<arg>alias: str = None</arg>
<arg>parameters: typing.Tuple = None</arg>
</arguments>
<doc>Check if the number of rows returned from ``selectStatement`` is less than the value submitted. If not, then this
will throw an AssertionError.

Set optional input ``sansTran`` to _True_ to run command without an explicit transaction commit or rollback.

Using optional ``msg`` to override the default error message:

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Use optional ``parameters`` for query variable substitution (variable substitution syntax may be different
depending on the database client).

Examples:
| Row Count Is Less Than X | SELECT id FROM person WHERE first_name = 'John' | 1 |
| Row Count Is Less Than X | SELECT id FROM person WHERE first_name = 'John' | 2 | msg=my error message |
| Row Count Is Less Than X | SELECT id FROM person WHERE first_name = 'John' | 3 | alias=my_alias |
| Row Count Is Less Than X | SELECT id FROM person WHERE first_name = 'John' | 4 | sansTran=True |
| @{parameters} | Create List |  John |
| Row Count Is Less Than X | SELECT id FROM person WHERE first_name = %s | 5 | parameters=${parameters} |</doc>
</kw>
<kw name="Set Auto Commit" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="445">
<arguments>
<arg>autoCommit: bool = True</arg>
<arg>alias: str = None</arg>
</arguments>
<doc>Turn the autocommit on the database connection ON or OFF.

The default behaviour on a newly created database connection is to automatically start a
transaction, which means that database actions that won't work if there is an active
transaction will fail. Common examples of these actions are creating or deleting a database
or database snapshot. By turning on auto commit on the database connection these actions
can be performed.

Example usage:
| # Default behaviour, sets auto commit to true
| Set Auto Commit
| Set Auto Commit | alias=my_alias |
| # Explicitly set the desired state
| Set Auto Commit | False</doc>
</kw>
<kw name="Switch Database" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\connection_manager.py" lineno="466">
<arguments>
<arg>alias: str</arg>
</arguments>
<doc>Switch the default database connection to ``alias``.

Examples:
| Switch Database | my_alias |
| Switch Database | alias=my_alias |</doc>
</kw>
<kw name="Table Must Exist" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\DatabaseLibrary\assertion.py" lineno="250">
<arguments>
<arg>tableName: str</arg>
<arg>sansTran: bool = False</arg>
<arg>msg: str = None</arg>
<arg>alias: str = None</arg>
</arguments>
<doc>Check if the given table exists in the database.

Set optional input ``sansTran`` to True to run command without an
explicit transaction commit or rollback.

The default error message can be overridden with the ``msg`` argument.

Use optional ``alias`` parameter to specify what connection should be used for the query if you have more
than one connection open.

Examples:
| Table Must Exist | person |
| Table Must Exist | person | msg=my error message |
| Table Must Exist | person | alias=my_alias |
| Table Must Exist | person | sansTran=True |</doc>
</kw>
</keywordspec>
<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="Selenium2Library" type="LIBRARY" format="ROBOT" scope="GLOBAL" namedargs="true" generated="2024-09-25T08:25:48Z" specversion="2" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\Selenium2Library\__init__.py" lineno="25">
<version>3.0.0</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>
---
*NOTE:* Selenium2Library has been renamed to SeleniumLibrary since version 3.0.
Nowadays Selenium2Library is just a thin wrapper to SeleniumLibrary that eases
with transitioning to the new project. See
[https://github.com/robotframework/SeleniumLibrary|SeleniumLibrary] and
[https://github.com/robotframework/Selenium2Library|Selenium2Library]
project pages for more information.
---
Selenium2Library is a web testing library for Robot Framework.

This document explains how to use keywords provided by Selenium2Library.
For information about installation, support, and more, please visit the
[https://github.com/robotframework/Selenium2Library|project pages].
For more information about Robot Framework, see http://robotframework.org.

Selenium2Library uses the Selenium WebDriver modules internally to
control a web browser. See http://seleniumhq.org for more information
about Selenium in general and Selenium2Library README.rst
[https://github.com/robotframework/Selenium2Library#browser-drivers|Browser drivers chapter]
for more details about WebDriver binary installation.

- `Locating elements`
- `Browser and Window`
- `Browser and Driver options and service class`
- `Timeouts, waits, and delays`
- `Run-on-failure functionality`
- `Boolean arguments`
- `EventFiringWebDriver`
- `Thread support`
- `Plugins`
- `Language`
- `Importing`
- `Shortcuts`
- `Keywords`

= Locating elements =

All keywords in Selenium2Library that need to interact with an element
on a web page take an argument typically named ``locator`` that specifies
how to find the element. Most often the locator is given as a string
using the locator syntax described below, but `using WebElements` is
possible too.

== Locator syntax ==

Selenium2Library supports finding elements based on different strategies
such as the element id, XPath expressions, or CSS selectors. The strategy
can either be explicitly specified with a prefix or the strategy can be
implicit.

=== Default locator strategy ===

By default, locators are considered to use the keyword specific default
locator strategy. All keywords support finding elements based on ``id``
and ``name`` attributes, but some keywords support additional attributes
or other values that make sense in their context. For example, `Click
Link` supports the ``href`` attribute and the link text and addition
to the normal ``id`` and ``name``.

Examples:

| `Click Element` | example | # Match based on ``id`` or ``name``.            |
| `Click Link`    | example | # Match also based on link text and ``href``.   |
| `Click Button`  | example | # Match based on ``id``, ``name`` or ``value``. |

If a locator accidentally starts with a prefix recognized as `explicit
locator strategy` or `implicit XPath strategy`, it is possible to use
the explicit ``default`` prefix to enable the default strategy.

Examples:

| `Click Element` | name:foo         | # Find element with name ``foo``.               |
| `Click Element` | default:name:foo | # Use default strategy with value ``name:foo``. |
| `Click Element` | //foo            | # Find element using XPath ``//foo``.           |
| `Click Element` | default: //foo   | # Use default strategy with value ``//foo``.    |

=== Explicit locator strategy ===

The explicit locator strategy is specified with a prefix using either
syntax ``strategy:value`` or ``strategy=value``. The former syntax
is preferred because the latter is identical to Robot Framework's
[http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#named-argument-syntax|
named argument syntax] and that can cause problems. Spaces around
the separator are ignored, so ``id:foo``, ``id: foo`` and ``id : foo``
are all equivalent.

Locator strategies that are supported by default are listed in the table
below. In addition to them, it is possible to register `custom locators`.

| = Strategy = |          = Match based on =         |         = Example =            |
| id           | Element ``id``.                     | ``id:example``                 |
| name         | ``name`` attribute.                 | ``name:example``               |
| identifier   | Either ``id`` or ``name``.          | ``identifier:example``         |
| class        | Element ``class``.                  | ``class:example``              |
| tag          | Tag name.                           | ``tag:div``                    |
| xpath        | XPath expression.                   | ``xpath://div[@id="example"]`` |
| css          | CSS selector.                       | ``css:div#example``            |
| dom          | DOM expression.                     | ``dom:document.images[5]``     |
| link         | Exact text a link has.              | ``link:The example``           |
| partial link | Partial link text.                  | ``partial link:he ex``         |
| sizzle       | Sizzle selector deprecated.         | ``sizzle:div.example``         |
| data         | Element ``data-*`` attribute        | ``data:id:my_id``              |
| jquery       | jQuery expression.                  | ``jquery:div.example``         |
| default      | Keyword specific default behavior.  | ``default:example``            |

See the `Default locator strategy` section below for more information
about how the default strategy works. Using the explicit ``default``
prefix is only necessary if the locator value itself accidentally
matches some of the explicit strategies.

Different locator strategies have different pros and cons. Using ids,
either explicitly like ``id:foo`` or by using the `default locator
strategy` simply like ``foo``, is recommended when possible, because
the syntax is simple and locating elements by id is fast for browsers.
If an element does not have an id or the id is not stable, other
solutions need to be used. If an element has a unique tag name or class,
using ``tag``, ``class`` or ``css`` strategy like ``tag:h1``,
``class:example`` or ``css:h1.example`` is often an easy solution. In
more complex cases using XPath expressions is typically the best
approach. They are very powerful but a downside is that they can also
get complex.

Examples:

| `Click Element` | id:foo                      | # Element with id 'foo'. |
| `Click Element` | css:div#foo h1              | # h1 element under div with id 'foo'. |
| `Click Element` | xpath: //div[@id="foo"]//h1 | # Same as the above using XPath, not CSS. |
| `Click Element` | xpath: //*[contains(text(), "example")] | # Element containing text 'example'. |

*NOTE:*

- The ``strategy:value`` syntax is only supported by Selenium2Library 3.0
  and newer.
- Using the ``sizzle`` strategy or its alias ``jquery`` requires that
  the system under test contains the jQuery library.
- Prior to Selenium2Library 3.0, table related keywords only supported
  ``xpath``, ``css`` and ``sizzle/jquery`` strategies.
- ``data`` strategy is conveniance locator that will construct xpath from the parameters.
  If you have element like `&lt;div data-automation="automation-id-2"&gt;`, you locate the element via
  ``data:automation:automation-id-2``. This feature was added in Selenium2Library 5.2.0

=== Implicit XPath strategy ===

If the locator starts with ``//``  or multiple opening parenthesis in front
of the ``//``, the locator is considered to be an XPath expression. In other
words, using ``//div`` is equivalent to using explicit ``xpath://div`` and
``((//div))`` is equivalent to using explicit ``xpath:((//div))``

Examples:

| `Click Element` | //div[@id="foo"]//h1 |
| `Click Element` | (//div)[2]           |

The support for the ``(//`` prefix is new in Selenium2Library 3.0.
Supporting multiple opening parenthesis is new in Selenium2Library 5.0.

=== Chaining locators ===

It is possible chain multiple locators together as single locator. Each chained locator must start with locator
strategy. Chained locators must be separated with single space, two greater than characters and followed with
space. It is also possible mix different locator strategies, example css or xpath. Also a list can also be
used to specify multiple locators. This is useful, is some part of locator would match as the locator separator
but it should not. Or if there is need to existing WebElement as locator.

Although all locators support chaining, some locator strategies do not abey the chaining. This is because
some locator strategies use JavaScript to find elements and JavaScript is executed for the whole browser context
and not for the element found be the previous locator. Chaining is supported by locator strategies which
are based on Selenium API, like `xpath` or `css`, but example chaining is not supported by `sizzle` or `jquery

Examples:
| `Click Element` | css:.bar &gt;&gt; xpath://a | # To find a link which is present after an element with class "bar" |

List examples:
| ${locator_list} =             | `Create List`   | css:div#div_id            | xpath://*[text(), " &gt;&gt; "] |
| `Page Should Contain Element` | ${locator_list} |                           |                           |
| ${element} =                  | Get WebElement  | xpath://*[text(), " &gt;&gt; "] |                           |
| ${locator_list} =             | `Create List`   | css:div#div_id            | ${element}                |
| `Page Should Contain Element` | ${locator_list} |                           |                           |

Chaining locators in new in Selenium2Library 5.0

== Using WebElements ==

In addition to specifying a locator as a string, it is possible to use
Selenium's WebElement objects. This requires first getting a WebElement,
for example, by using the `Get WebElement` keyword.

| ${elem} =       | `Get WebElement` | id:example |
| `Click Element` | ${elem}          |            |

== Custom locators ==

If more complex lookups are required than what is provided through the
default locators, custom lookup strategies can be created. Using custom
locators is a two part process. First, create a keyword that returns
a WebElement that should be acted on:

| Custom Locator Strategy | [Arguments] | ${browser} | ${locator} | ${tag} | ${constraints} |
|   | ${element}= | Execute Javascript | return window.document.getElementById('${locator}'); |
|   | [Return] | ${element} |

This keyword is a reimplementation of the basic functionality of the
``id`` locator where ``${browser}`` is a reference to a WebDriver
instance and ``${locator}`` is the name of the locator strategy. To use
this locator, it must first be registered by using the
`Add Location Strategy` keyword:

| `Add Location Strategy` | custom | Custom Locator Strategy |

The first argument of `Add Location Strategy` specifies the name of
the strategy and it must be unique. After registering the strategy,
the usage is the same as with other locators:

| `Click Element` | custom:example |

See the `Add Location Strategy` keyword for more details.

= Browser and Window =

There is different conceptual meaning when Selenium2Library talks
about windows or browsers. This chapter explains those differences.

== Browser ==

When `Open Browser` or `Create WebDriver` keyword is called, it
will create a new Selenium WebDriver instance by using the
[https://www.seleniumhq.org/docs/03_webdriver.jsp|Selenium WebDriver]
API. In Selenium2Library terms, a new browser is created. It is
possible to start multiple independent browsers (Selenium Webdriver
instances) at the same time, by calling `Open Browser` or
`Create WebDriver` multiple times. These browsers are usually
independent of each other and do not share data like cookies,
sessions or profiles. Typically when the browser starts, it
creates a single window which is shown to the user.

== Window ==

Windows are the part of a browser that loads the web site and presents
it to the user. All content of the site is the content of the window.
Windows are children of a browser. In Selenium2Library browser is a
synonym for WebDriver instance. One browser may have multiple
windows. Windows can appear as tabs, as separate windows or pop-ups with
different position and size. Windows belonging to the same browser
typically share the sessions detail, like cookies. If there is a
need to separate sessions detail, example login with two different
users, two browsers (Selenium WebDriver instances) must be created.
New windows can be opened example by the application under test or
by example `Execute Javascript` keyword:

| `Execute Javascript`    window.open()    # Opens a new window with location about:blank

The example below opens multiple browsers and windows,
to demonstrate how the different keywords can be used to interact
with browsers, and windows attached to these browsers.

Structure:
| BrowserA
|            Window 1  (location=https://robotframework.org/)
|            Window 2  (location=https://robocon.io/)
|            Window 3  (location=https://github.com/robotframework/)
|
| BrowserB
|            Window 1  (location=https://github.com/)

Example:
| `Open Browser`       | https://robotframework.org         | ${BROWSER}       | alias=BrowserA   | # BrowserA with first window is opened.                                       |
| `Execute Javascript` | window.open()                      |                  |                  | # In BrowserA second window is opened.                                        |
| `Switch Window`      | locator=NEW                        |                  |                  | # Switched to second window in BrowserA                                       |
| `Go To`              | https://robocon.io                 |                  |                  | # Second window navigates to robocon site.                                    |
| `Execute Javascript` | window.open()                      |                  |                  | # In BrowserA third window is opened.                                         |
| ${handle}            | `Switch Window`                    | locator=NEW      |                  | # Switched to third window in BrowserA                                        |
| `Go To`              | https://github.com/robotframework/ |                  |                  | # Third windows goes to robot framework github site.                          |
| `Open Browser`       | https://github.com                 | ${BROWSER}       | alias=BrowserB   | # BrowserB with first windows is opened.                                      |
| ${location}          | `Get Location`                     |                  |                  | # ${location} is: https://www.github.com                                      |
| `Switch Window`      | ${handle}                          | browser=BrowserA |                  | # BrowserA second windows is selected.                                        |
| ${location}          | `Get Location`                     |                  |                  | # ${location} = https://robocon.io/                                           |
| @{locations 1}       | `Get Locations`                    |                  |                  | # By default, lists locations under the currectly active browser (BrowserA).   |
| @{locations 2}       | `Get Locations`                    |  browser=ALL     |                  | # By using browser=ALL argument keyword list all locations from all browsers. |

The above example, @{locations 1} contains the following items:
https://robotframework.org/, https://robocon.io/ and
https://github.com/robotframework/'. The @{locations 2}
contains the following items: https://robotframework.org/,
https://robocon.io/, https://github.com/robotframework/'
and 'https://github.com/.

= Browser and Driver options and service class =

This section talks about how to configure either the browser or
the driver using the options and service arguments of the `Open
Browser` keyword.

== Configuring the browser using the Selenium Options ==

As noted within the keyword documentation for `Open Browser`, its
``options`` argument accepts Selenium options in two different
formats: as a string and as Python object which is an instance of
the Selenium options class.

=== Options string format ===

The string format allows defining Selenium options methods
or attributes and their arguments in Robot Framework test data.
The method and attributes names are case and space sensitive and
must match to the Selenium options methods and attributes names.
When defining a method, it must be defined in a similar way as in
python: method name, opening parenthesis, zero to many arguments
and closing parenthesis. If there is a need to define multiple
arguments for a single method, arguments must be separated with
comma, just like in Python. Example: `add_argument("--headless")`
or `add_experimental_option("key", "value")`. Attributes are
defined in a similar way as in Python: attribute name, equal sign,
and attribute value. Example, `headless=True`. Multiple methods
and attributes must be separated by a semicolon. Example:
`add_argument("--headless");add_argument("--start-maximized")`.

Arguments allow defining Python data types and arguments are
evaluated by using Python
[https://docs.python.org/3/library/ast.html#ast.literal_eval|ast.literal_eval].
Strings must be quoted with single or double quotes, example "value"
or 'value'. It is also possible to define other Python builtin
data types, example `True` or `None`, by not using quotes
around the arguments.

The string format is space friendly. Usually, spaces do not alter
the defining methods or attributes. There are two exceptions.
In some Robot Framework test data formats, two or more spaces are
considered as cell separator and instead of defining a single
argument, two or more arguments may be defined. Spaces in string
arguments are not removed and are left as is. Example
`add_argument ( "--headless" )` is same as
`add_argument("--headless")`. But `add_argument(" --headless ")` is
not same same as `add_argument ( "--headless" )`, because
spaces inside of quotes are not removed. Please note that if
options string contains backslash, example a Windows OS path,
the backslash needs escaping both in Robot Framework data and
in Python side. This means single backslash must be writen using
four backslash characters. Example, Windows path:
"C:\path\to\profile" must be written as
"C:\\\\path\\\to\\\\profile". Another way to write
backslash is use Python
[https://docs.python.org/3/reference/lexical_analysis.html#string-and-bytes-literals|raw strings]
and example write: r"C:\\path\\to\\profile".

=== Selenium Options as Python class ===

As last format, ``options`` argument also supports receiving
the Selenium options as Python class instance. In this case, the
instance is used as-is and the Selenium2Library will not convert
the instance to other formats.
For example, if the following code return value is saved to
`${options}` variable in the Robot Framework data:
| options = webdriver.ChromeOptions()
| options.add_argument('--disable-dev-shm-usage')
| return options

Then the `${options}` variable can be used as an argument to
``options``.

Example the ``options`` argument can be used to launch Chomium-based
applications which utilize the
[https://bitbucket.org/chromiumembedded/cef/wiki/UsingChromeDriver|Chromium Embedded Framework]
. To launch Chromium-based application, use ``options`` to define
`binary_location` attribute and use `add_argument` method to define
`remote-debugging-port` port for the application. Once the browser
is opened, the test can interact with the embedded web-content of
the system under test.

== Configuring the driver using the Service class ==

With the ``service`` argument, one can setup and configure the driver. For example
one can set the driver location and/port or specify the command line arguments. There
are several browser specific attributes related to logging as well. For the various
Service Class attributes refer to
[https://www.selenium.dev/documentation/webdriver/drivers/service/|the Selenium documentation]
. Currently the ``service`` argument only accepts Selenium service in the string format.

=== Service string format ===

The string format allows for defining Selenium service attributes
and their values in the `Open Browser` keyword. The attributes names
are case and space sensitive and must match to the Selenium attributes
names. Attributes are defined in a similar way as in Python: attribute
name, equal sign, and attribute value. Example, `port=1234`. Multiple
attributes must be separated by a semicolon. Example:
`executable_path='/path/to/driver';port=1234`. Don't have duplicate
attributes, like `service_args=['--append-log', '--readable-timestamp'];
service_args=['--log-level=DEBUG']` as the second will override the first.
Instead combine them as in
`service_args=['--append-log', '--readable-timestamp', '--log-level=DEBUG']`

Arguments allow defining Python data types and arguments are
evaluated by using Python. Strings must be quoted with single
or double quotes, example "value" or 'value'

= Timeouts, waits, and delays =

This section discusses different ways how to wait for elements to
appear on web pages and to slow down execution speed otherwise.
It also explains the `time format` that can be used when setting various
timeouts, waits, and delays.

== Timeout ==

Selenium2Library contains various keywords that have an optional
``timeout`` argument that specifies how long these keywords should
wait for certain events or actions. These keywords include, for example,
``Wait ...`` keywords and keywords related to alerts. Additionally
`Execute Async Javascript`. Although it does not have ``timeout``,
argument, uses a timeout to define how long asynchronous JavaScript
can run.

The default timeout these keywords use can be set globally either by
using the `Set Selenium Timeout` keyword or with the ``timeout`` argument
when `importing` the library. If no default timeout is set globally, the
default is 5 seconds. If None is specified for the timeout argument in the
keywords, the default is used. See `time format` below for supported
timeout syntax.

== Implicit wait ==

Implicit wait specifies the maximum time how long Selenium waits when
searching for elements. It can be set by using the `Set Selenium Implicit
Wait` keyword or with the ``implicit_wait`` argument when `importing`
the library. See [https://www.seleniumhq.org/docs/04_webdriver_advanced.jsp|
Selenium documentation] for more information about this functionality.

See `time format` below for supported syntax.

== Page load ==
Page load timeout is the amount of time to wait for page load to complete
until a timeout exception is raised.

The default page load timeout can be set globally
when `importing` the library with the ``page_load_timeout`` argument
or by using the `Set Selenium Page Load Timeout` keyword.

See `time format` below for supported timeout syntax.

Support for page load is new in Selenium2Library 6.1

== Selenium speed ==

Selenium execution speed can be slowed down globally by using `Set
Selenium speed` keyword. This functionality is designed to be used for
demonstrating or debugging purposes. Using it to make sure that elements
appear on a page is not a good idea. The above-explained timeouts
and waits should be used instead.

See `time format` below for supported syntax.

== Time format ==

All timeouts and waits can be given as numbers considered seconds
(e.g. ``0.5`` or ``42``) or in Robot Framework's time syntax
(e.g. ``1.5 seconds`` or ``1 min 30 s``). For more information about
the time syntax see the
[http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#time-format|Robot Framework User Guide].

= Run-on-failure functionality =

Selenium2Library has a handy feature that it can automatically execute
a keyword if any of its own keywords fails. By default, it uses the
`Capture Page Screenshot` keyword, but this can be changed either by
using the `Register Keyword To Run On Failure` keyword or with the
``run_on_failure`` argument when `importing` the library. It is
possible to use any keyword from any imported library or resource file.

The run-on-failure functionality can be disabled by using a special value
``NOTHING`` or anything considered false (see `Boolean arguments`)
such as ``NONE``.

= Boolean arguments =

Starting from 5.0 Selenium2Library relies on Robot Framework to perform the
boolean conversion based on keyword arguments [https://docs.python.org/3/library/typing.html|type hint].
More details in Robot Framework
[http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#supported-conversions|user guide]

Please note Selenium2Library 3 and 4 did have own custom methods to covert
arguments to boolean values.

= EventFiringWebDriver =

The Selenium2Library offers support for
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver|EventFiringWebDriver].
See the Selenium and Selenium2Library
[https://github.com/robotframework/Selenium2Library/blob/master/docs/extending/extending.rst#EventFiringWebDriver|EventFiringWebDriver support]
documentation for further details.

EventFiringWebDriver is new in Selenium2Library 4.0

= Thread support =

Selenium2Library is not thread-safe. This is mainly due because the underlying
[https://github.com/SeleniumHQ/selenium/wiki/Frequently-Asked-Questions#q-is-webdriver-thread-safe|
Selenium tool is not thread-safe] within one browser/driver instance.
Because of the limitation in the Selenium side, the keywords or the
API provided by the Selenium2Library is not thread-safe.

= Plugins =

Selenium2Library offers plugins as a way to modify and add library keywords and modify some of the internal
functionality without creating a new library or hacking the source code. See
[https://github.com/robotframework/Selenium2Library/blob/master/docs/extending/extending.rst#Plugins|plugin API]
documentation for further details.

Plugin API is new Selenium2Library 4.0

= Language =

Selenium2Library offers the possibility to translate keyword names and documentation to new language. If language
is defined, Selenium2Library will search from
[https://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#module-search-path | module search path]
for Python packages starting with `robotframework-seleniumlibrary-translation` by using the
[https://packaging.python.org/en/latest/guides/creating-and-discovering-plugins/ | Python pluging API]. The Library
is using naming convention to find Python plugins.

The package must implement a single API call, ``get_language`` without any arguments. The method must return a
dictionary containing two keys: ``language`` and ``path``. The language key value defines which language
the package contains. Also the value should match (case insensitive) the library ``language`` import parameter.
The path parameter value should be full path to the translation file.

== Translation file ==

The file name or extension is not important, but data must be in [https://www.json.org/json-en.html | json]
format. The keys of json are the methods names, not the keyword names, which implements keywords. Value of
key is json object which contains two keys: ``name`` and ``doc``. The ``name`` key contains the keyword
translated name and `doc` contains translated documentation. Providing doc and name are optional, example
translation json file can only provide translations to keyword names or only to documentation. But it is
always recommended to provide translation to both name and doc. Special key ``__intro__`` is for class level
documentation and ``__init__`` is for init level documentation. These special values ``name`` can not be
translated, instead ``name`` should be kept the same.

== Generating template translation file ==

Template translation file, with English language can be created by running:
`rfselib translation /path/to/translation.json` command. Command does not provide translations to other
languages, it only provides easy way to create full list keywords and their documentation in correct
format. It is also possible to add keywords from library plugins by providing `--plugins` arguments
to command. Example: `rfselib translation --plugins myplugin.SomePlugin /path/to/translation.json` The
generated json file contains `sha256` key, which contains the sha256 sum of the library documentation.
The sha256 sum is used by `rfselib translation --compare /path/to/translation.json` command, which compares
the translation to the library and prints outs a table which tells if there are changes needed for
the translation file.

Example project for translation can be found from
[https://github.com/MarketSquare/robotframework-seleniumlibrary-translation-fi | robotframework-seleniumlibrary-translation-fi]
repository.</doc>
<init source="..\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\__init__.py" lineno="596">
<arguments>
<arg>timeout=0:00:05</arg>
<arg>implicit_wait=0:00:00</arg>
<arg>run_on_failure=Capture Page Screenshot</arg>
<arg>screenshot_root_directory: str = None</arg>
<arg>plugins: str = None</arg>
<arg>event_firing_webdriver: str = None</arg>
<arg>page_load_timeout=0:05:00</arg>
<arg>action_chain_delay=0:00:00.250000</arg>
<arg>language: str = None</arg>
</arguments>
<doc>Selenium2Library can be imported with several optional arguments.

- ``timeout``:
  Default value for `timeouts` used with ``Wait ...`` keywords.
- ``implicit_wait``:
  Default value for `implicit wait` used when locating elements.
- ``run_on_failure``:
  Default action for the `run-on-failure functionality`.
- ``screenshot_root_directory``:
  Path to folder where possible screenshots are created or EMBED.
  See `Set Screenshot Directory` keyword for further details about EMBED.
  If not given, the directory where the log file is written is used.
- ``plugins``:
  Allows extending the Selenium2Library with external Python classes.
- ``event_firing_webdriver``:
  Class for wrapping Selenium with
  [https://seleniumhq.github.io/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.event_firing_webdriver.html#module-selenium.webdriver.support.event_firing_webdriver|EventFiringWebDriver]
- ``page_load_timeout``:
  Default value to wait for page load to complete until a timeout exception is raised.
- ``action_chain_delay``:
  Default value for `ActionChains` delay to wait in between actions.
- ``language``:
  Defines language which is used to translate keyword names and documentation.</doc>
</init>
<kw name="Add Cookie" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="143">
<arguments>
<arg>name: str</arg>
<arg>value: str</arg>
<arg>path: typing.Optional[str] = None</arg>
<arg>domain: typing.Optional[str] = None</arg>
<arg>secure: typing.Optional[bool] = None</arg>
<arg>expiry: typing.Optional[str] = None</arg>
</arguments>
<doc>Adds a cookie to your current session.

``name`` and ``value`` are required, ``path``, ``domain``, ``secure``
and ``expiry`` are optional.  Expiry supports the same formats as
the [http://robotframework.org/robotframework/latest/libraries/DateTime.html|DateTime]
library or an epoch timestamp.

Example:
| `Add Cookie` | foo | bar |                            |
| `Add Cookie` | foo | bar | domain=example.com         |
| `Add Cookie` | foo | bar | expiry=2027-09-28 16:21:35 | # Expiry as timestamp.     |
| `Add Cookie` | foo | bar | expiry=1822137695          | # Expiry as epoch seconds. |

Prior to Selenium2Library 3.0 setting expiry did not work.</doc>
</kw>
<kw name="Add Location Strategy" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1149">
<arguments>
<arg>strategy_name: str</arg>
<arg>strategy_keyword: str</arg>
<arg>persist: bool = False</arg>
</arguments>
<doc>Adds a custom location strategy.

See `Custom locators` for information on how to create and use
custom strategies. `Remove Location Strategy` can be used to
remove a registered strategy.

Location strategies are automatically removed after leaving the
current scope by default. Setting ``persist`` to a true value (see
`Boolean arguments`) will cause the location strategy to stay
registered throughout the life of the test.</doc>
</kw>
<kw name="Alert Should Be Present" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\alert.py" lineno="52">
<arguments>
<arg>text: str = </arg>
<arg>action: str = ACCEPT</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
</arguments>
<doc>Verifies that an alert is present and by default, accepts it.

Fails if no alert is present. If ``text`` is a non-empty string,
then it is used to verify alert's message. The alert is accepted
by default, but that behavior can be controlled by using the
``action`` argument same way as with `Handle Alert`.

``timeout`` specifies how long to wait for the alert to appear.
If it is not given, the global default `timeout` is used instead.

``action`` and ``timeout`` arguments are new in Selenium2Library 3.0.
In earlier versions, the alert was always accepted and a timeout was
hardcoded to one second.</doc>
</kw>
<kw name="Alert Should Not Be Present" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\alert.py" lineno="79">
<arguments>
<arg>action: str = ACCEPT</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
</arguments>
<doc>Verifies that no alert is present.

If the alert actually exists, the ``action`` argument determines
how it should be handled. By default, the alert is accepted, but
it can be also dismissed or left open the same way as with the
`Handle Alert` keyword.

``timeout`` specifies how long to wait for the alert to appear.
By default, is not waited for the alert at all, but a custom time can
be given if alert may be delayed. See the `time format` section
for information about the syntax.

New in Selenium2Library 3.0.</doc>
</kw>
<kw name="Assign Id To Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="227">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>id: str</arg>
</arguments>
<doc>Assigns a temporary ``id`` to the element specified by ``locator``.

This is mainly useful if the locator is complicated and/or slow XPath
expression and it is needed multiple times. Identifier expires when
the page is reloaded.

See the `Locating elements` section for details about the locator
syntax.

Example:
| `Assign ID to Element` | //ul[@class='example' and ./li[contains(., 'Stuff')]] | my id |
| `Page Should Contain Element` | my id |</doc>
</kw>
<kw name="Capture Element Screenshot" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\screenshot.py" lineno="132">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>filename: str = selenium-element-screenshot-{index}.png</arg>
</arguments>
<doc>Captures a screenshot from the element identified by ``locator`` and embeds it into log file.

See `Capture Page Screenshot` for details about ``filename`` argument.
See the `Locating elements` section for details about the locator
syntax.

An absolute path to the created element screenshot is returned.

Support for capturing the screenshot from an element has limited support
among browser vendors. Please check the browser vendor driver documentation
does the browser support capturing a screenshot from an element.

New in Selenium2Library 3.3. Support for EMBED is new in Selenium2Library 4.2.

Examples:
| `Capture Element Screenshot` | id:image_id |                                |
| `Capture Element Screenshot` | id:image_id | ${OUTPUTDIR}/id_image_id-1.png |
| `Capture Element Screenshot` | id:image_id | EMBED                          |</doc>
</kw>
<kw name="Capture Page Screenshot" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\screenshot.py" lineno="70">
<arguments>
<arg>filename: str = selenium-screenshot-{index}.png</arg>
</arguments>
<doc>Takes a screenshot of the current page and embeds it into a log file.

``filename`` argument specifies the name of the file to write the
screenshot into. The directory where screenshots are saved can be
set when `importing` the library or by using the `Set Screenshot
Directory` keyword. If the directory is not configured, screenshots
are saved to the same directory where Robot Framework's log file is
written.

If ``filename`` equals to EMBED (case insensitive), then screenshot
is embedded as Base64 image to the log.html. In this case file is not
created in the filesystem.

Starting from Selenium2Library 1.8, if ``filename`` contains marker
``{index}``, it will be automatically replaced with an unique running
index, preventing files to be overwritten. Indices start from 1,
and how they are represented can be customized using Python's
[https://docs.python.org/3/library/string.html#format-string-syntax|
format string syntax].

An absolute path to the created screenshot file is returned or if
``filename``  equals to EMBED, word `EMBED` is returned.

Support for EMBED is new in Selenium2Library 4.2

Examples:
| `Capture Page Screenshot` |                                        |
| `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-1.png |
| ${path} =                 | `Capture Page Screenshot`              |
| `File Should Exist`       | ${OUTPUTDIR}/selenium-screenshot-2.png |
| `File Should Exist`       | ${path}                                |
| `Capture Page Screenshot` | custom_name.png                        |
| `File Should Exist`       | ${OUTPUTDIR}/custom_name.png           |
| `Capture Page Screenshot` | custom_with_index_{index}.png          |
| `File Should Exist`       | ${OUTPUTDIR}/custom_with_index_1.png   |
| `Capture Page Screenshot` | formatted_index_{index:03}.png         |
| `File Should Exist`       | ${OUTPUTDIR}/formatted_index_001.png   |
| `Capture Page Screenshot` | EMBED                                  |
| `File Should Not Exist`   | EMBED                                  |</doc>
</kw>
<kw name="Checkbox Should Be Selected" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="44">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Verifies checkbox ``locator`` is selected/checked.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Checkbox Should Not Be Selected" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="58">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Verifies checkbox ``locator`` is not selected/checked.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Choose File" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="216">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>file_path: str</arg>
</arguments>
<doc>Inputs the ``file_path`` into the file input field ``locator``.

This keyword is most often used to input files into upload forms.
The keyword does not check ``file_path`` is the file or folder
available on the machine where tests are executed. If the ``file_path``
points at a file and when using Selenium Grid, Selenium will
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.command.html?highlight=upload#selenium.webdriver.remote.command.Command.UPLOAD_FILE|magically],
transfer the file from the machine where the tests are executed
to the Selenium Grid node where the browser is running.
Then Selenium will send the file path, from the nodes file
system, to the browser.

That ``file_path`` is not checked, is new in Selenium2Library 4.0.

Example:
| `Choose File` | my_upload_field | ${CURDIR}/trades.csv |</doc>
</kw>
<kw name="Clear Element Text" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="561">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Clears the value of the text-input-element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Click Button" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="584">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>modifier: typing.Union[bool, str] = False</arg>
</arguments>
<doc>Clicks the button identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, buttons are
searched using ``id``, ``name``, and ``value``.

See the `Click Element` keyword for details about the
``modifier`` argument.

The ``modifier`` argument is new in Selenium2Library 3.3</doc>
</kw>
<kw name="Click Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="654">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>modifier: typing.Union[bool, str] = False</arg>
<arg>action_chain: bool = False</arg>
</arguments>
<doc>Click the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

The ``modifier`` argument can be used to pass
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys|Selenium Keys]
when clicking the element. The `+` can be used as a separator
for different Selenium Keys. The `CTRL` is internally translated to
the `CONTROL` key. The ``modifier`` is space and case insensitive, example
"alt" and " aLt " are supported formats to
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ALT|ALT key]
. If ``modifier`` does not match to Selenium Keys, keyword fails.

If ``action_chain`` argument is true, see `Boolean arguments` for more
details on how to set boolean argument, then keyword uses ActionChain
based click instead of the &lt;web_element&gt;.click() function. If both
``action_chain`` and ``modifier`` are defined, the click will be
performed using ``modifier`` and ``action_chain`` will be ignored.

Example:
| Click Element | id:button |                   | # Would click element without any modifiers.               |
| Click Element | id:button | CTRL              | # Would click element with CTLR key pressed down.          |
| Click Element | id:button | CTRL+ALT          | # Would click element with CTLR and ALT keys pressed down. |
| Click Element | id:button | action_chain=True | # Clicks the button using an Selenium  ActionChains        |

The ``modifier`` argument is new in Selenium2Library 3.2
The ``action_chain`` argument is new in Selenium2Library 4.1</doc>
</kw>
<kw name="Click Element At Coordinates" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="722">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>xoffset: int</arg>
<arg>yoffset: int</arg>
</arguments>
<doc>Click the element ``locator`` at ``xoffset/yoffset``.

The Cursor is moved and the center of the element and x/y coordinates are
calculated from that point.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Click Image" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="608">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>modifier: typing.Union[bool, str] = False</arg>
</arguments>
<doc>Clicks an image identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, images are searched
using ``id``, ``name``, ``src`` and ``alt``.

See the `Click Element` keyword for details about the
``modifier`` argument.

The ``modifier`` argument is new in Selenium2Library 3.3</doc>
</kw>
<kw name="Click Link" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="633">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>modifier: typing.Union[bool, str] = False</arg>
</arguments>
<doc>Clicks a link identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, links are searched
using ``id``, ``name``, ``href`` and the link text.

See the `Click Element` keyword for details about the
``modifier`` argument.

The ``modifier`` argument is new in Selenium2Library 3.3</doc>
</kw>
<kw name="Close All Browsers" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="40">
<arguments>
</arguments>
<doc>Closes all open browsers and resets the browser cache.

After this keyword, new indexes returned from `Open Browser` keyword
are reset to 1.

This keyword should be used in test or suite teardown to make sure
all browsers are closed.</doc>
</kw>
<kw name="Close Browser" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="53">
<arguments>
</arguments>
<doc>Closes the current browser.</doc>
</kw>
<kw name="Close Window" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="125">
<arguments>
</arguments>
<doc>Closes currently opened and selected browser window/tab.</doc>
</kw>
<kw name="Cover Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="511">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Will cover elements identified by ``locator`` with a blue div without breaking page layout.

See the `Locating elements` section for details about the locator
syntax.

New in Selenium2Library 3.3.0

Example:
|`Cover Element` | css:div#container |</doc>
</kw>
<kw name="Create Webdriver" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="277">
<arguments>
<arg>driver_name: str</arg>
<arg>alias: typing.Optional[str] = None</arg>
<arg>kwargs: typing.Optional[dict] = None</arg>
<arg>**init_kwargs</arg>
</arguments>
<doc>Creates an instance of Selenium WebDriver.

Like `Open Browser`, but allows passing arguments to the created
WebDriver instance directly. This keyword should only be used if
the functionality provided by `Open Browser` is not adequate.

``driver_name`` must be a WebDriver implementation name like Firefox,
Chrome, Ie, Edge, Safari, or Remote.

The initialized WebDriver can be configured either with a Python
dictionary ``kwargs`` or by using keyword arguments ``**init_kwargs``.
These arguments are passed directly to WebDriver without any
processing. See [https://seleniumhq.github.io/selenium/docs/api/py/api.html|
Selenium API documentation] for details about the supported arguments.

Examples:
| # Use proxy with Firefox   |                |                              |                                      |
| ${proxy}=                  | `Evaluate`     | selenium.webdriver.Proxy()   | modules=selenium, selenium.webdriver |
| ${proxy.http_proxy}=       | `Set Variable` | localhost:8888               |                                      |
| `Create Webdriver`         | Firefox        | proxy=${proxy}               |                                      |

Returns the index of this browser instance which can be used later to
switch back to it. Index starts from 1 and is reset back to it when
`Close All Browsers` keyword is used. See `Switch Browser` for an
example.</doc>
</kw>
<kw name="Current Frame Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="53">
<arguments>
<arg>text: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies that the current frame contains ``text``.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.

Prior to Selenium2Library 3.0 this keyword was named
`Current Frame Contains`.</doc>
</kw>
<kw name="Current Frame Should Not Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="70">
<arguments>
<arg>text: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies that the current frame does not contain ``text``.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.</doc>
</kw>
<kw name="Delete All Cookies" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="57">
<arguments>
</arguments>
<doc>Deletes all cookies.</doc>
</kw>
<kw name="Delete Cookie" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="62">
<arguments>
<arg>name</arg>
</arguments>
<doc>Deletes the cookie matching ``name``.

If the cookie is not found, nothing happens.</doc>
</kw>
<kw name="Double Click Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="744">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Double clicks the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Drag And Drop" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="780">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>target: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Drags the element identified by ``locator`` into the ``target`` element.

The ``locator`` argument is the locator of the dragged element
and the ``target`` is the locator of the target. See the
`Locating elements` section for details about the locator syntax.

Example:
| `Drag And Drop` | css:div#element | css:div.target |</doc>
</kw>
<kw name="Drag And Drop By Offset" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="798">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>xoffset: int</arg>
<arg>yoffset: int</arg>
</arguments>
<doc>Drags the element identified with ``locator`` by ``xoffset/yoffset``.

See the `Locating elements` section for details about the locator
syntax.

The element will be moved by ``xoffset`` and ``yoffset``, each of which
is a negative or positive number specifying the offset.

Example:
| `Drag And Drop By Offset` | myElem | 50 | -35 | # Move myElem 50px right and 35px down |</doc>
</kw>
<kw name="Element Attribute Value Should Be" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="451">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>attribute: str</arg>
<arg>expected: typing.Optional[str]</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies element identified by ``locator`` contains expected attribute value.

See the `Locating elements` section for details about the locator
syntax.

Example:
`Element Attribute Value Should Be` | css:img | href | value

New in Selenium2Library 3.2.</doc>
</kw>
<kw name="Element Should Be Disabled" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="246">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Verifies that element identified by ``locator`` is disabled.

This keyword considers also elements that are read-only to be
disabled.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Element Should Be Enabled" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="259">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Verifies that element identified by ``locator`` is enabled.

This keyword considers also elements that are read-only to be
disabled.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Element Should Be Focused" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="272">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Verifies that element identified by ``locator`` is focused.

See the `Locating elements` section for details about the locator
syntax.

New in Selenium2Library 3.0.</doc>
</kw>
<kw name="Element Should Be Visible" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="289">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies that the element identified by ``locator`` is visible.

Herein, visible means that the element is logically visible, not
optically visible in the current browser viewport. For example,
an element that carries ``display:none`` is not logically visible,
so using this keyword on that element would fail.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.</doc>
</kw>
<kw name="Element Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="54">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: typing.Optional[str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>ignore_case: bool = False</arg>
</arguments>
<doc>Verifies that element ``locator`` contains text ``expected``.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``ignore_case`` argument can be set to True to compare case
insensitive, default is False. New in Selenium2Library 3.1.

``ignore_case`` argument is new in Selenium2Library 3.1.

Use `Element Text Should Be` if you want to match the exact text,
not a substring.</doc>
</kw>
<kw name="Element Should Not Be Visible" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="312">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies that the element identified by ``locator`` is NOT visible.

Passes if the element does not exists. See `Element Should Be Visible`
for more information about visibility and supported arguments.</doc>
</kw>
<kw name="Element Should Not Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="92">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: typing.Optional[str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>ignore_case: bool = False</arg>
</arguments>
<doc>Verifies that element ``locator`` does not contain text ``expected``.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``ignore_case`` argument can be set to True to compare case
insensitive, default is False.

``ignore_case`` argument new in Selenium2Library 3.1.</doc>
</kw>
<kw name="Element Text Should Be" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="331">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: typing.Optional[str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>ignore_case: bool = False</arg>
</arguments>
<doc>Verifies that element ``locator`` contains exact the text ``expected``.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``ignore_case`` argument can be set to True to compare case
insensitive, default is False.

``ignore_case`` argument is new in Selenium2Library 3.1.

Use `Element Should Contain` if a substring match is desired.</doc>
</kw>
<kw name="Element Text Should Not Be" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="367">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>not_expected: typing.Optional[str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>ignore_case: bool = False</arg>
</arguments>
<doc>Verifies that element ``locator`` does not contain exact the text ``not_expected``.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``ignore_case`` argument can be set to True to compare case
insensitive, default is False.

New in Selenium2Library 3.1.1</doc>
</kw>
<kw name="Execute Async Javascript" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\javascript.py" lineno="76">
<arguments>
<arg>*code: Any</arg>
</arguments>
<doc>Executes asynchronous JavaScript code with possible arguments.

Similar to `Execute Javascript` except that scripts executed with
this keyword must explicitly signal they are finished by invoking the
provided callback. This callback is always injected into the executed
function as the last argument.

Scripts must complete within the script timeout or this keyword will
fail. See the `Timeout` section for more information.

Starting from Selenium2Library 3.2 it is possible to provide JavaScript
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_async_script|
arguments] as part of ``code`` argument. See `Execute Javascript` for
more details.

Examples:
| `Execute Async JavaScript` | var callback = arguments[arguments.length - 1]; window.setTimeout(callback, 2000); |
| `Execute Async JavaScript` | ${CURDIR}/async_js_to_execute.js |
| ${result} = | `Execute Async JavaScript`                      |
| ...         | var callback = arguments[arguments.length - 1]; |
| ...         | function answer(){callback("text");};           |
| ...         | window.setTimeout(answer, 2000);                |
| `Should Be Equal` | ${result} | text |</doc>
</kw>
<kw name="Execute Javascript" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\javascript.py" lineno="33">
<arguments>
<arg>*code: Any</arg>
</arguments>
<doc>Executes the given JavaScript code with possible arguments.

``code`` may be divided into multiple cells in the test data and
``code`` may contain multiple lines of code and arguments. In that case,
the JavaScript code parts are concatenated together without adding
spaces and optional arguments are separated from ``code``.

If ``code`` is a path to an existing file, the JavaScript
to execute will be read from that file. Forward slashes work as
a path separator on all operating systems.

The JavaScript executes in the context of the currently selected
frame or window as the body of an anonymous function. Use ``window``
to refer to the window of your application and ``document`` to refer
to the document object of the current frame or window, e.g.
``document.getElementById('example')``.

This keyword returns whatever the executed JavaScript code returns.
Return values are converted to the appropriate Python types.

Starting from Selenium2Library 3.2 it is possible to provide JavaScript
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_remote/selenium.webdriver.remote.webdriver.html#selenium.webdriver.remote.webdriver.WebDriver.execute_script|
arguments] as part of ``code`` argument. The JavaScript code and
arguments must be separated with `JAVASCRIPT` and `ARGUMENTS` markers
and must be used exactly with this format. If the Javascript code is
first, then the `JAVASCRIPT` marker is optional. The order of
`JAVASCRIPT` and `ARGUMENTS` markers can be swapped, but if `ARGUMENTS`
is the first marker, then `JAVASCRIPT` marker is mandatory. It is only
allowed to use `JAVASCRIPT` and `ARGUMENTS` markers only one time in the
``code`` argument.

Examples:
| `Execute JavaScript` | window.myFunc('arg1', 'arg2') |
| `Execute JavaScript` | ${CURDIR}/js_to_execute.js    |
| `Execute JavaScript` | alert(arguments[0]); | ARGUMENTS | 123 |
| `Execute JavaScript` | ARGUMENTS | 123 | JAVASCRIPT | alert(arguments[0]); |</doc>
</kw>
<kw name="Frame Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="84">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>text: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies that frame identified by ``locator`` contains ``text``.

See the `Locating elements` section for details about the locator
syntax.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.</doc>
</kw>
<kw name="Get Action Chain Delay" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="656">
<arguments>
</arguments>
<doc>Gets the currently stored value for chain_delay_value in timestr format.</doc>
</kw>
<kw name="Get All Links" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1028">
<arguments>
</arguments>
<doc>Returns a list containing ids of all links found in current page.

If a link has no id, an empty string will be in the list instead.</doc>
</kw>
<kw name="Get Browser Aliases" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="388">
<arguments>
</arguments>
<doc>Returns aliases of all active browser that has an alias as NormalizedDict.
The dictionary contains the aliases as keys and the index as value.
This can be accessed as dictionary ``${aliases.key}`` or as list ``@{aliases}[0]``.

Example:
| `Open Browser` | https://example.com   | alias=BrowserA | |
| `Open Browser` | https://example.com   | alias=BrowserB | |
| &amp;{aliases}     | `Get Browser Aliases` |                | # &amp;{aliases} = { BrowserA=1|BrowserB=2 } |
| `Log`          | ${aliases.BrowserA}   |                | # logs ``1`` |
| FOR            | ${alias}              | IN             | @{aliases} |
|                | `Log`                 | ${alias}       | # logs ``BrowserA`` and ``BrowserB`` |
| END            |                       |                | |

See `Switch Browser` for more information and examples.

New in Selenium2Library 4.0</doc>
</kw>
<kw name="Get Browser Ids" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="371">
<arguments>
</arguments>
<doc>Returns index of all active browser as list.

Example:
| @{browser_ids}= | Get Browser Ids   |                   |                |
| FOR             | ${id}             | IN                | @{browser_ids} |
|                 | @{window_titles}= | Get Window Titles | browser=${id}  |
|                 | Log               | Browser ${id} has these windows: ${window_titles} | |
| END             |                   |                   |                |

See `Switch Browser` for more information and examples.

New in Selenium2Library 4.0</doc>
</kw>
<kw name="Get Cookie" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="97">
<arguments>
<arg>name: str</arg>
</arguments>
<doc>Returns information of cookie with ``name`` as an object.

If no cookie is found with ``name``, keyword fails. The cookie object
contains details about the cookie. Attributes available in the object
are documented in the table below.

| = Attribute = |             = Explanation =                                |
| name          | The name of a cookie.                                      |
| value         | Value of the cookie.                                       |
| path          | Indicates a URL path, for example ``/``.                   |
| domain        | The domain, the cookie is visible to.                      |
| secure        | When true, the cookie is only used with HTTPS connections. |
| httpOnly      | When true, the cookie is not accessible via JavaScript.    |
| expiry        | Python datetime object indicating when the cookie expires. |
| extra         | Possible attributes outside of the WebDriver specification |

See the
[https://w3c.github.io/webdriver/#cookies|WebDriver specification]
for details about the cookie information.
Notice that ``expiry`` is specified as a
[https://docs.python.org/3/library/datetime.html#datetime.datetime|datetime object],
not as seconds since Unix Epoch like WebDriver natively does.

In some cases, example when running a browser in the cloud, it is possible that
the cookie contains other attributes than is defined in the
[https://w3c.github.io/webdriver/#cookies|WebDriver specification].
These other attributes are available in an ``extra`` attribute in the cookie
object and it contains a dictionary of the other attributes. The ``extra``
attribute is new in Selenium2Library 4.0.

Example:
| `Add Cookie`      | foo             | bar |
| ${cookie} =       | `Get Cookie`    | foo |
| `Should Be Equal` | ${cookie.name}  | foo |
| `Should Be Equal` | ${cookie.value} | bar |
| `Should Be True`  | ${cookie.expiry.year} &gt; 2017 |

New in Selenium2Library 3.0.</doc>
</kw>
<kw name="Get Cookies" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\cookie.py" lineno="70">
<arguments>
<arg>as_dict: bool = False</arg>
</arguments>
<doc>Returns all cookies of the current page.

If ``as_dict`` argument evaluates as false, see `Boolean arguments`
for more details, then cookie information is returned as
a single string in format ``name1=value1; name2=value2; name3=value3``.
When ``as_dict`` argument evaluates as true, cookie information
is returned as Robot Framework dictionary format. The string format
can be used, for example, for logging purposes or in headers when
sending HTTP requests. The dictionary format is helpful when
the result can be passed to requests library's Create Session
keyword's optional cookies parameter.

The `` as_dict`` argument is new in Selenium2Library 3.3</doc>
</kw>
<kw name="Get Dom Attribute" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="419">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>attribute: str</arg>
</arguments>
<doc>Returns the value of ``attribute`` from the element ``locator``. `Get DOM Attribute` keyword
only returns attributes declared within the element's HTML markup.  If the requested attribute
is not there, the keyword returns ${None}.

See the `Locating elements` section for details about the locator
syntax.

Example:
| ${id}= | `Get DOM Attribute` | css:h1 | id |</doc>
</kw>
<kw name="Get Element Attribute" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="401">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>attribute: str</arg>
</arguments>
<doc>Returns the value of ``attribute`` from the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Example:
| ${id}= | `Get Element Attribute` | css:h1 | id |

Passing attribute name as part of the ``locator`` was removed
in Selenium2Library 3.2. The explicit ``attribute`` argument
should be used instead.</doc>
</kw>
<kw name="Get Element Count" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1133">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns the number of elements matching ``locator``.

If you wish to assert the number of matching elements, use
`Page Should Contain Element` with ``limit`` argument. Keyword will
always return an integer.

Example:
| ${count} =       | `Get Element Count` | name:div_name  |
| `Should Be True` | ${count} &gt; 2        |                |

New in Selenium2Library 3.0.</doc>
</kw>
<kw name="Get Element Size" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="496">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns width and height of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Both width and height are returned as integers.

Example:
| ${width} | ${height} = | `Get Element Size` | css:div#container |</doc>
</kw>
<kw name="Get Horizontal Position" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="482">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns the horizontal position of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

The position is returned in pixels off the left side of the page,
as an integer.

See also `Get Vertical Position`.</doc>
</kw>
<kw name="Get List Items" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="27">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>values: bool = False</arg>
</arguments>
<doc>Returns all labels or values of selection list ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Returns visible labels by default, but values can be returned by
setting the ``values`` argument to a true value (see `Boolean
arguments`).

Example:
| ${labels} = | `Get List Items` | mylist              |             |
| ${values} = | `Get List Items` | css:#example select | values=True |

Support to return values is new in Selenium2Library 3.0.</doc>
</kw>
<kw name="Get Location" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="427">
<arguments>
</arguments>
<doc>Returns the current browser window URL.</doc>
</kw>
<kw name="Get Locations" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="166">
<arguments>
<arg>browser: str = CURRENT</arg>
</arguments>
<doc>Returns and logs URLs of all windows of the selected browser.

*Browser Scope:*

The ``browser`` argument specifies the browser that shall return
its windows information.

- ``browser`` can be ``index_or_alias`` like in `Switch Browser`.

- If ``browser`` is ``CURRENT`` (default, case-insensitive)
  the currently active browser is selected.

- If ``browser`` is ``ALL`` (case-insensitive)
  the window information of all windows of all opened browsers are returned.</doc>
</kw>
<kw name="Get Property" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="436">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>property: str</arg>
</arguments>
<doc>Returns the value of ``property`` from the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Example:
| ${text_length}= | `Get Property` | css:h1 | text_length |</doc>
</kw>
<kw name="Get Selected List Label" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="52">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns the label of selected option from selection list ``locator``.

If there are multiple selected options, the label of the first option
is returned.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Get Selected List Labels" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="65">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns labels of selected options from selection list ``locator``.

Starting from Selenium2Library 3.0, returns an empty list if there
are no selections. In earlier versions, this caused an error.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Get Selected List Value" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="78">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns the value of selected option from selection list ``locator``.

If there are multiple selected options, the value of the first option
is returned.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Get Selected List Values" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="91">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns values of selected options from selection list ``locator``.

Starting from Selenium2Library 3.0, returns an empty list if there
are no selections. In earlier versions, this caused an error.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Get Selenium Implicit Wait" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="549">
<arguments>
</arguments>
<doc>Gets the implicit wait value used by Selenium.

The value is returned as a human-readable string like ``1 second``.

See the `Implicit wait` section above for more information.</doc>
</kw>
<kw name="Get Selenium Page Load Timeout" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="559">
<arguments>
</arguments>
<doc>Gets the time to wait for a page load to complete
before raising a timeout exception.

The value is returned as a human-readable string like ``1 second``.

See the `Page load` section above for more information.

New in Selenium2Library 6.1</doc>
</kw>
<kw name="Get Selenium Speed" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="529">
<arguments>
</arguments>
<doc>Gets the delay that is waited after each Selenium command.

The value is returned as a human-readable string like ``1 second``.

See the `Selenium Speed` section above for more information.</doc>
</kw>
<kw name="Get Selenium Timeout" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="539">
<arguments>
</arguments>
<doc>Gets the timeout that is used by various keywords.

The value is returned as a human-readable string like ``1 second``.

See the `Timeout` section above for more information.</doc>
</kw>
<kw name="Get Session Id" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="409">
<arguments>
</arguments>
<doc>Returns the currently active browser session id.

New in Selenium2Library 3.2</doc>
</kw>
<kw name="Get Source" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="417">
<arguments>
</arguments>
<doc>Returns the entire HTML source of the current page or frame.</doc>
</kw>
<kw name="Get Table Cell" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="26">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>row: int</arg>
<arg>column: int</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Returns contents of a table cell.

The table is located using the ``locator`` argument and its cell
found using ``row`` and ``column``. See the `Locating elements`
section for details about the locator syntax.

Both row and column indexes start from 1, and header and footer
rows are included in the count. It is possible to refer to rows
and columns from the end by using negative indexes so that -1
is the last row/column, -2 is the second last, and so on.

All ``&lt;th&gt;`` and ``&lt;td&gt;`` elements anywhere in the table are
considered to be cells.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.</doc>
</kw>
<kw name="Get Text" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="552">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns the text value of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Get Title" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="422">
<arguments>
</arguments>
<doc>Returns the title of the current page.</doc>
</kw>
<kw name="Get Value" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="543">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns the value attribute of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Get Vertical Position" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="570">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns the vertical position of the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

The position is returned in pixels off the top of the page,
as an integer.

See also `Get Horizontal Position`.</doc>
</kw>
<kw name="Get WebElement" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="32">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns the first WebElement matching the given ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Get WebElements" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="41">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Returns a list of WebElement objects matching the ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Starting from Selenium2Library 3.0, the keyword returns an empty
list if there are no matching elements. In previous releases, the
keyword failed in this case.</doc>
</kw>
<kw name="Get Window Handles" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="130">
<arguments>
<arg>browser: str = CURRENT</arg>
</arguments>
<doc>Returns all child window handles of the selected browser as a list.

Can be used as a list of windows to exclude with `Select Window`.

How to select the ``browser`` scope of this keyword, see `Get Locations`.

Prior to Selenium2Library 3.0, this keyword was named `List Windows`.</doc>
</kw>
<kw name="Get Window Identifiers" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="142">
<arguments>
<arg>browser: str = CURRENT</arg>
</arguments>
<doc>Returns and logs id attributes of all windows of the selected browser.

How to select the ``browser`` scope of this keyword, see `Get Locations`.</doc>
</kw>
<kw name="Get Window Names" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="150">
<arguments>
<arg>browser: str = CURRENT</arg>
</arguments>
<doc>Returns and logs names of all windows of the selected browser.

How to select the ``browser`` scope of this keyword, see `Get Locations`.</doc>
</kw>
<kw name="Get Window Position" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="261">
<arguments>
</arguments>
<doc>Returns current window position.

The position is relative to the top left corner of the screen. Returned
values are integers. See also `Set Window Position`.

Example:
| ${x} | ${y}= | `Get Window Position` |</doc>
</kw>
<kw name="Get Window Size" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="195">
<arguments>
<arg>inner: bool = False</arg>
</arguments>
<doc>Returns current window width and height as integers.

See also `Set Window Size`.

If ``inner`` parameter is set to True, keyword returns
HTML DOM window.innerWidth and window.innerHeight properties.
See `Boolean arguments` for more details on how to set boolean
arguments. The ``inner`` is new in Selenium2Library 4.0.

Example:
| ${width} | ${height}= | `Get Window Size` |      |
| ${width} | ${height}= | `Get Window Size` | True |</doc>
</kw>
<kw name="Get Window Titles" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="158">
<arguments>
<arg>browser: str = CURRENT</arg>
</arguments>
<doc>Returns and logs titles of all windows of the selected browser.

How to select the ``browser`` scope of this keyword, see `Get Locations`.</doc>
</kw>
<kw name="Go Back" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="513">
<arguments>
</arguments>
<doc>Simulates the user clicking the back button on their browser.</doc>
</kw>
<kw name="Go To" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="518">
<arguments>
<arg>url</arg>
</arguments>
<doc>Navigates the current browser window to the provided ``url``.</doc>
</kw>
<kw name="Handle Alert" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\alert.py" lineno="104">
<arguments>
<arg>action: str = ACCEPT</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
</arguments>
<doc>Handles the current alert and returns its message.

By default, the alert is accepted, but this can be controlled
with the ``action`` argument that supports the following
case-insensitive values:

- ``ACCEPT``: Accept the alert i.e. press ``Ok``. Default.
- ``DISMISS``: Dismiss the alert i.e. press ``Cancel``.
- ``LEAVE``: Leave the alert open.

The ``timeout`` argument specifies how long to wait for the alert
to appear. If it is not given, the global default `timeout` is used
instead.

Examples:
| Handle Alert |                |       | # Accept alert.  |
| Handle Alert | action=DISMISS |       | # Dismiss alert. |
| Handle Alert | timeout=10 s   |       | # Use custom timeout and accept alert.  |
| Handle Alert | DISMISS        | 1 min | # Use custom timeout and dismiss alert. |
| ${message} = | Handle Alert   |       | # Accept alert and get its message.     |
| ${message} = | Handle Alert   | LEAVE | # Leave alert open and get its message. |

New in Selenium2Library 3.0.</doc>
</kw>
<kw name="Input Password" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="242">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>password: str</arg>
<arg>clear: bool = True</arg>
</arguments>
<doc>Types the given password into the text field identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. See `Input Text` for ``clear`` argument details.

Difference compared to `Input Text` is that this keyword does not
log the given password on the INFO level. Notice that if you use
the keyword like

| Input Password | password_field | password |

the password is shown as a normal keyword argument. A way to avoid
that is using variables like

| Input Password | password_field | ${PASSWORD} |

Please notice that Robot Framework logs all arguments using
the TRACE level and tests must not be executed using level below
DEBUG if the password should not be logged in any format.

The `clear` argument is new in Selenium2Library 4.0. Hiding password
logging from Selenium logs is new in Selenium2Library 4.2.</doc>
</kw>
<kw name="Input Text" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="272">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>text: str</arg>
<arg>clear: bool = True</arg>
</arguments>
<doc>Types the given ``text`` into the text field identified by ``locator``.

When ``clear`` is true, the input element is cleared before
the text is typed into the element. When false, the previous text
is not cleared from the element. Use `Input Password` if you
do not want the given ``text`` to be logged.

If [https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid]
is used and the ``text`` argument points to a file in the file system,
then this keyword prevents the Selenium to transfer the file to the
Selenium Grid hub. Instead, this keyword will send the ``text`` string
as is to the element. If a file should be transferred to the hub and
upload should be performed, please use `Choose File` keyword.

See the `Locating elements` section for details about the locator
syntax. See the `Boolean arguments` section how Boolean values are
handled.

Disabling the file upload the Selenium Grid node and the `clear`
argument are new in Selenium2Library 4.0</doc>
</kw>
<kw name="Input Text Into Alert" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\alert.py" lineno="34">
<arguments>
<arg>text: str</arg>
<arg>action: str = ACCEPT</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
</arguments>
<doc>Types the given ``text`` into an input field in an alert.

The alert is accepted by default, but that behavior can be controlled
by using the ``action`` argument same way as with `Handle Alert`.

``timeout`` specifies how long to wait for the alert to appear.
If it is not given, the global default `timeout` is used instead.

New in Selenium2Library 3.0.</doc>
</kw>
<kw name="List Selection Should Be" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="104">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>*expected: str</arg>
</arguments>
<doc>Verifies selection list ``locator`` has ``expected`` options selected.

It is possible to give expected options both as visible labels and
as values. Starting from Selenium2Library 3.0, mixing labels and
values is not possible. Order of the selected options is not
validated.

If no expected options are given, validates that the list has
no selections. A more explicit alternative is using `List Should
Have No Selections`.

See the `Locating elements` section for details about the locator
syntax.

Examples:
| `List Selection Should Be` | gender    | Female          |        |
| `List Selection Should Be` | interests | Test Automation | Python |</doc>
</kw>
<kw name="List Should Have No Selections" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="141">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Verifies selection list ``locator`` has no options selected.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Location Should Be" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="432">
<arguments>
<arg>url: str</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies that the current URL is exactly ``url``.

The ``url`` argument contains the exact url that should exist in browser.

The ``message`` argument can be used to override the default error
message.

``message`` argument is new in Selenium2Library 3.2.0.</doc>
</kw>
<kw name="Location Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="450">
<arguments>
<arg>expected: str</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies that the current URL contains ``expected``.

The ``expected`` argument contains the expected value in url.

The ``message`` argument can be used to override the default error
message.

``message`` argument is new in Selenium2Library 3.2.0.</doc>
</kw>
<kw name="Log Location" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="471">
<arguments>
</arguments>
<doc>Logs and returns the current browser window URL.</doc>
</kw>
<kw name="Log Source" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="478">
<arguments>
<arg>loglevel: str = INFO</arg>
</arguments>
<doc>Logs and returns the HTML source of the current page or frame.

The ``loglevel`` argument defines the used log level. Valid log
levels are ``WARN``, ``INFO`` (default), ``DEBUG``, ``TRACE``
and ``NONE`` (no logging).</doc>
</kw>
<kw name="Log Title" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="490">
<arguments>
</arguments>
<doc>Logs and returns the title of the current page.</doc>
</kw>
<kw name="Maximize Browser Window" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="185">
<arguments>
</arguments>
<doc>Maximizes current browser window.</doc>
</kw>
<kw name="Minimize Browser Window" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="190">
<arguments>
</arguments>
<doc>Minimizes current browser window.</doc>
</kw>
<kw name="Mouse Down" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="818">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Simulates pressing the left mouse button on the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.

The element is pressed without releasing the mouse button.

See also the more specific keywords `Mouse Down On Image` and
`Mouse Down On Link`.</doc>
</kw>
<kw name="Mouse Down On Image" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1085">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Simulates a mouse down event on an image identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, images are searched
using ``id``, ``name``, ``src`` and ``alt``.</doc>
</kw>
<kw name="Mouse Down On Link" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1037">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Simulates a mouse down event on a link identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, links are searched
using ``id``, ``name``, ``href`` and the link text.</doc>
</kw>
<kw name="Mouse Out" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="835">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Simulates moving the mouse away from the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Mouse Over" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="852">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Simulates hovering the mouse over the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Mouse Up" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="864">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Simulates releasing the left mouse button on the element ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Open Browser" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="60">
<arguments>
<arg>url: typing.Optional[str] = None</arg>
<arg>browser: str = firefox</arg>
<arg>alias: typing.Optional[str] = None</arg>
<arg>remote_url: typing.Union[bool, str] = False</arg>
<arg>desired_capabilities: typing.Union[dict, NoneType, str] = None</arg>
<arg>ff_profile_dir: typing.Union[selenium.webdriver.firefox.firefox_profile.FirefoxProfile, str, NoneType] = None</arg>
<arg>options: Any = None</arg>
<arg>service_log_path: typing.Optional[str] = None</arg>
<arg>executable_path: typing.Optional[str] = None</arg>
<arg>service: Any = None</arg>
</arguments>
<doc>Opens a new browser instance to the optional ``url``.

The ``browser`` argument specifies which browser to use. The
supported browsers are listed in the table below. The browser names
are case-insensitive and some browsers have multiple supported names.

|    = Browser =    |        = Name(s) =       |
| Firefox           | firefox, ff              |
| Google Chrome     | googlechrome, chrome, gc |
| Headless Firefox  | headlessfirefox          |
| Headless Chrome   | headlesschrome           |
| Internet Explorer | internetexplorer, ie     |
| Edge              | edge                     |
| Safari            | safari                   |

To be able to actually use one of these browsers, you need to have
a matching Selenium browser driver available. See the
[https://github.com/robotframework/Selenium2Library#browser-drivers|
project documentation] for more details.

After opening the browser, it is possible to use optional
``url`` to navigate the browser to the desired address.

Examples:
| `Open Browser` | http://example.com | Chrome  |                                         |
| `Open Browser` | http://example.com | Firefox | alias=Firefox                           |
| `Open Browser` | http://example.com | Edge    | remote_url=http://127.0.0.1:4444/wd/hub |
| `Open Browser` | about:blank        |         |                                         |
| `Open Browser` | browser=Chrome     |         |                                         |

Optional ``alias`` is an alias given for this browser instance and
it can be used for switching between browsers. When same ``alias``
is given with two `Open Browser` keywords, the first keyword will
open a new browser, but the second one will switch to the already
opened browser and will not open a new browser. The ``alias``
definition overrules ``browser`` definition. When same ``alias``
is used but a different ``browser`` is defined, then switch to
a browser with same alias is done and new browser is not opened.
An alternative approach for switching is using an index returned
by this keyword. These indices start from 1, are incremented when new
browsers are opened, and reset back to 1 when `Close All Browsers`
is called. See `Switch Browser` for more information and examples.

Alias examples:
| ${1_index} =    | `Open Browser` | http://example.com | Chrome  | alias=Chrome     | # Opens new browser because alias is new.         |
| ${2_index} =    | `Open Browser` | http://example.com | Firefox |                  | # Opens new browser because alias is not defined. |
| ${3_index} =    | `Open Browser` | http://example.com | Chrome  | alias=Chrome     | # Switches to the browser with Chrome alias.      |
| ${4_index} =    | `Open Browser` | http://example.com | Chrome  | alias=${1_index} | # Switches to the browser with Chrome alias.      |
| Should Be Equal | ${1_index}     | ${3_index}         |         |                  |                                                   |
| Should Be Equal | ${1_index}     | ${4_index}         |         |                  |                                                   |
| Should Be Equal | ${2_index}     | ${2}               |         |                  |                                                   |

Optional ``remote_url`` is the URL for a
[https://github.com/SeleniumHQ/selenium/wiki/Grid2|Selenium Grid].

Optional ``desired_capabilities`` is deprecated and will be removed
in the next release. Capabilities of each individual browser is now
done through options or services. Please refer to those arguments
for configuring specific browsers.

Optional ``ff_profile_dir`` is the path to the Firefox profile
directory if you wish to overwrite the default profile Selenium
uses. The ``ff_profile_dir`` can also be an instance of the
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.firefox_profile.html|selenium.webdriver.FirefoxProfile]
. As a third option, it is possible to use `FirefoxProfile` methods
and attributes to define the profile using methods and attributes
in the same way as with ``options`` argument. Example: It is possible
to use FirefoxProfile `set_preference` to define different
profile settings. See ``options`` argument documentation in below
how to handle backslash escaping.

Example for FirefoxProfile
| `Open Browser` | http://example.com | Firefox | ff_profile_dir=/path/to/profile                                                  | # Using profile from disk.                       |
| `Open Browser` | http://example.com | Firefox | ff_profile_dir=${FirefoxProfile_instance}                                        | # Using instance of FirefoxProfile.              |
| `Open Browser` | http://example.com | Firefox | ff_profile_dir=set_preference("key", "value");set_preference("other", "setting") | # Defining profile using FirefoxProfile mehtods. |

Optional ``options`` argument allows defining browser specific
Selenium options. Example for Chrome, the ``options`` argument
allows defining the following
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|methods and attributes]
and for Firefox these
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_firefox/selenium.webdriver.firefox.options.html?highlight=firefox#selenium.webdriver.firefox.options.Options|methods and attributes]
are available. Selenium options are also supported, when ``remote_url``
argument is used.

The Selenium2Library ``options`` argument accepts Selenium
options in two different formats: as a string and as Python object
which is an instance of the Selenium options class.

The string format uses a Python like syntax to define Selenium options
methods or attributes.

Example when using
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver_chrome/selenium.webdriver.chrome.options.html#selenium.webdriver.chrome.options.Options|Chrome options]
method:
| `Open Browser` | http://example.com | Chrome | options=add_argument("--disable-popup-blocking"); add_argument("--ignore-certificate-errors") | # Sting format.                    |
| `Open Browser` | None               | Chrome | options=binary_location="/path/to/binary";add_argument("remote-debugging-port=port")          | # Start Chomium-based application. |
| `Open Browser` | None               | Chrome | options=binary_location=r"C:\\path\\to\\binary"                                         | # Windows OS path escaping.        |

``options`` argument also supports receiving the Selenium
options as Python class instance.

See the `Browser and Driver options` section for more details on how to use
the either the string format or Python object syntax with the ``options`` argument.

Optional ``service_log_path`` will be deprecated in the next release. Please
use the browser specific ``service`` attribute instead. The ``service_log_path``
argument defines the name of the file where to write the browser driver logs.
If the ``service_log_path``  argument contains a marker ``{index}``, it
will be automatically replaced with unique running
index preventing files to be overwritten. Indices start's from 1,
and how they are represented can be customized using Python's
[https://docs.python.org/3/library/string.html#format-string-syntax|
format string syntax].

Optional ``executable_path``  will be deprecated in the next release. Please
use the `executable_path` and, if needed, `port` attribute on the ``service``
argument instead. The ``executable_path`` argument defines the path to the driver
executable, example to a chromedriver or a geckodriver. If not defined
it is assumed the executable is in the
[https://en.wikipedia.org/wiki/PATH_(variable)|$PATH].

Optional ``service`` argument allows for managing the local drivers
as well as setting some browser specific settings like logging. Service
classes are not supported when ``remote_url`` argument is used. See the
`Browser and Driver options` section for more details on how to use
the ``service`` argument.

If the provided configuration options are not enough, it is possible
to use `Create Webdriver` to customize browser initialization even
more.

The ``service`` argument is new in Selenium2Library 6.4.</doc>
</kw>
<kw name="Open Context Menu" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="875">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Opens the context menu on the element identified by ``locator``.</doc>
</kw>
<kw name="Page Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="127">
<arguments>
<arg>text: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies that current page contains ``text``.

If this keyword fails, it automatically logs the page source
using the log level specified with the optional ``loglevel``
argument. Valid log levels are ``TRACE`` (default), ``DEBUG``,
``INFO``, ``WARN``, and ``NONE``. If the log level is ``NONE``
or below the current active log level the source will not be logged.

!! WARNING !! If you have an iframe selected, `Page Should Contain`
will reset the frame reference back to the main frame. This is due
to the fact that is searches for the ``text`` in all frames. To locate
an element in an iframe after calling `Page Should Contian` one needs
to (re)select the frame.</doc>
</kw>
<kw name="Page Should Contain Button" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="430">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies button ``locator`` is found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, buttons are
searched using ``id``, ``name``, and ``value``.</doc>
</kw>
<kw name="Page Should Contain Checkbox" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="70">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies checkbox ``locator`` is found from the current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Page Should Contain Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="150">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str, typing.List[typing.Union[selenium.webdriver.remote.webelement.WebElement, str]]]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
<arg>limit: typing.Optional[int] = None</arg>
</arguments>
<doc>Verifies that element ``locator`` is found on the current page.

See the `Locating elements` section for details about the locator
syntax.

The ``message`` argument can be used to override the default error
message.

The ``limit`` argument can used to define how many elements the
page should contain. When ``limit`` is ``None`` (default) page can
contain one or more elements. When limit is a number, page must
contain same number of elements.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.

Examples assumes that locator matches to two elements.
| `Page Should Contain Element` | div_name | limit=1    | # Keyword fails.                  |
| `Page Should Contain Element` | div_name | limit=2    | # Keyword passes.                 |
| `Page Should Contain Element` | div_name | limit=none | # None is considered one or more. |
| `Page Should Contain Element` | div_name |            | # Same as above.                  |

The ``limit`` argument is new in Selenium2Library 3.0.</doc>
</kw>
<kw name="Page Should Contain Image" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1097">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies image identified by ``locator`` is found from current page.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, images are searched
using ``id``, ``name``, ``src`` and ``alt``.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.</doc>
</kw>
<kw name="Page Should Contain Link" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1049">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies link identified by ``locator`` is found from current page.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, links are searched
using ``id``, ``name``, ``href`` and the link text.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.</doc>
</kw>
<kw name="Page Should Contain List" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="159">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies selection list ``locator`` is found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Page Should Contain Radio Button" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="132">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies radio button ``locator`` is found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, radio buttons are
searched using ``id``, ``name`` and ``value``.</doc>
</kw>
<kw name="Page Should Contain Textfield" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="300">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies text field ``locator`` is found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Page Should Not Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="198">
<arguments>
<arg>text: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies the current page does not contain ``text``.

See `Page Should Contain` for an explanation about the ``loglevel``
argument.</doc>
</kw>
<kw name="Page Should Not Contain Button" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="451">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies button ``locator`` is not found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, buttons are
searched using ``id``, ``name``, and ``value``.</doc>
</kw>
<kw name="Page Should Not Contain Checkbox" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="87">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies checkbox ``locator`` is not found from the current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Page Should Not Contain Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="210">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies that element ``locator`` is not found on the current page.

See the `Locating elements` section for details about the locator
syntax.

See `Page Should Contain` for an explanation about ``message`` and
``loglevel`` arguments.</doc>
</kw>
<kw name="Page Should Not Contain Image" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1115">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies image identified by ``locator`` is not found from current page.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, images are searched
using ``id``, ``name``, ``src`` and ``alt``.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.</doc>
</kw>
<kw name="Page Should Not Contain Link" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1067">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies link identified by ``locator`` is not found from current page.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, links are searched
using ``id``, ``name``, ``href`` and the link text.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.</doc>
</kw>
<kw name="Page Should Not Contain List" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="176">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies selection list ``locator`` is not found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Page Should Not Contain Radio Button" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="150">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies radio button ``locator`` is not found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax. When using the default locator strategy, radio buttons are
searched using ``id``, ``name`` and ``value``.</doc>
</kw>
<kw name="Page Should Not Contain Textfield" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="317">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>message: typing.Optional[str] = None</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies text field ``locator`` is not found from current page.

See `Page Should Contain Element` for an explanation about ``message``
and ``loglevel`` arguments.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Press Key" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="907">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>key: str</arg>
</arguments>
<doc>Simulates user pressing key on element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

``key`` is either a single character, a string, or a numerical ASCII
code of the key lead by '\'.

Examples:
| `Press Key` | text_field   | q     |
| `Press Key` | text_field   | abcde |
| `Press Key` | login_button | \13  | # ASCII code for enter key |

`Press Key` and `Press Keys` differ in the methods to simulate key
presses. `Press Key` uses the WebDriver `SEND_KEYS_TO_ELEMENT` command
using the selenium send_keys method. Although one is not recommended
over the other if `Press Key` does not work we recommend trying
`Press Keys`.
send_</doc>
</kw>
<kw name="Press Keys" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="934">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str] = None</arg>
<arg>*keys: str</arg>
</arguments>
<doc>Simulates the user pressing key(s) to an element or on the active browser.

If ``locator`` evaluates as false, see `Boolean arguments` for more
details, then the ``keys`` are sent to the currently active browser.
Otherwise element is searched and ``keys`` are send to the element
identified by the ``locator``. In later case, keyword fails if element
is not found. See the `Locating elements` section for details about
the locator syntax.

``keys`` arguments can contain one or many strings, but it can not
be empty. ``keys`` can also be a combination of
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html|Selenium Keys]
and strings or a single Selenium Key. If Selenium Key is combined
with strings, Selenium key and strings must be separated by the
`+` character, like in `CONTROL+c`. Selenium Keys
are space and case sensitive and Selenium Keys are not parsed
inside of the string. Example AALTO, would send string `AALTO`
and `ALT` not parsed inside of the string. But `A+ALT+O` would
found Selenium ALT key from the ``keys`` argument. It also possible
to press many Selenium Keys down at the same time, example
'ALT+ARROW_DOWN`.

If Selenium Keys are detected in the ``keys`` argument, keyword
will press the Selenium Key down, send the strings and
 then release the Selenium Key. If keyword needs to send a Selenium
Key as a string, then each character must be separated with
`+` character, example `E+N+D`.

`CTRL` is alias for
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.CONTROL|Selenium CONTROL]
and ESC is alias for
[https://seleniumhq.github.io/selenium/docs/api/py/webdriver/selenium.webdriver.common.keys.html#selenium.webdriver.common.keys.Keys.ESCAPE|Selenium ESCAPE]

New in Selenium2Library 3.3

Examples:
| `Press Keys` | text_field | AAAAA          |            | # Sends string "AAAAA" to element.                                                |
| `Press Keys` | None       | BBBBB          |            | # Sends string "BBBBB" to currently active browser.                               |
| `Press Keys` | text_field | E+N+D          |            | # Sends string "END" to element.                                                  |
| `Press Keys` | text_field | XXX            | YY         | # Sends strings "XXX" and "YY" to element.                                        |
| `Press Keys` | text_field | XXX+YY         |            | # Same as above.                                                                  |
| `Press Keys` | text_field | ALT+ARROW_DOWN |            | # Pressing "ALT" key down, then pressing ARROW_DOWN and then releasing both keys. |
| `Press Keys` | text_field | ALT            | ARROW_DOWN | # Pressing "ALT" key and then pressing ARROW_DOWN.                                |
| `Press Keys` | text_field | CTRL+c         |            | # Pressing CTRL key down, sends string "c" and then releases CTRL key.            |
| `Press Keys` | button     | RETURN         |            | # Pressing "ENTER" key to element.                                                |

`Press Key` and `Press Keys` differ in the methods to simulate key
presses. `Press Keys` uses the Selenium/WebDriver Actions.
`Press Keys` also has a more extensive syntax for describing keys,
key combinations, and key actions. Although one is not recommended
over the other if `Press Keys` does not work we recommend trying
`Press Key`.</doc>
</kw>
<kw name="Print Page As Pdf" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\screenshot.py" lineno="243">
<arguments>
<arg>filename: str = selenium-page-{index}.pdf</arg>
<arg>background: typing.Optional[bool] = None</arg>
<arg>margin_bottom: typing.Optional[float] = None</arg>
<arg>margin_left: typing.Optional[float] = None</arg>
<arg>margin_right: typing.Optional[float] = None</arg>
<arg>margin_top: typing.Optional[float] = None</arg>
<arg>orientation: typing.Optional[str] = None</arg>
<arg>page_height: typing.Optional[float] = None</arg>
<arg>page_ranges: typing.Optional[list] = None</arg>
<arg>page_width: typing.Optional[float] = None</arg>
<arg>scale: typing.Optional[float] = None</arg>
<arg>shrink_to_fit: typing.Optional[bool] = None</arg>
</arguments>
<doc>Print the current page as a PDF

``page_ranges`` defaults to `['-']` or "all" pages. ``page_ranges`` takes a list of
strings indicating the ranges.

The page size defaults to 21.59 for ``page_width`` and 27.94 for ``page_height``.
This is the equivalent size of US-Letter. The assumed units on these parameters
is centimeters.

The default margin for top, left, bottom, right is `1`. The assumed units on
these parameters is centimeters.

The default ``orientation`` is `portrait`. ``orientation`` can be either `portrait`
or `landscape`.

The default ``scale`` is `1`. ``scale`` must be greater than or equal to `0.1` and
less than or equal to `2`.

``background`` and ``scale_to_fit`` can be either `${True}` or `${False}`..

If all print options are None then a pdf will fail to print silently.</doc>
</kw>
<kw name="Radio Button Should Be Set To" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="168">
<arguments>
<arg>group_name: str</arg>
<arg>value: str</arg>
</arguments>
<doc>Verifies radio button group ``group_name`` is set to ``value``.

``group_name`` is the ``name`` of the radio button group.</doc>
</kw>
<kw name="Radio Button Should Not Be Selected" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="183">
<arguments>
<arg>group_name: str</arg>
</arguments>
<doc>Verifies radio button group ``group_name`` has no selection.

``group_name`` is the ``name`` of the radio button group.</doc>
</kw>
<kw name="Register Keyword To Run On Failure" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\runonfailure.py" lineno="23">
<arguments>
<arg>keyword: typing.Optional[str]</arg>
</arguments>
<doc>Sets the keyword to execute, when a Selenium2Library keyword fails.

``keyword`` is the name of a keyword that will be executed if a
Selenium2Library keyword fails. It is possible to use any available
keyword, including user keywords or keywords from other libraries,
but the keyword must not take any arguments.

The initial keyword to use is set when `importing` the library, and
the keyword that is used by default is `Capture Page Screenshot`.
Taking a screenshot when something failed is a very useful
feature, but notice that it can slow down the execution.

It is possible to use string ``NOTHING`` or ``NONE``,
case-insensitively, as well as Python ``None`` to disable this
feature altogether.

This keyword returns the name of the previously registered
failure keyword or Python ``None`` if this functionality was
previously disabled. The return value can be always used to
restore the original value later.

Example:
| `Register Keyword To Run On Failure`  | Log Source |
| ${previous kw}= | `Register Keyword To Run On Failure`  | NONE |
| `Register Keyword To Run On Failure`  | ${previous kw} |

Changes in Selenium2Library 3.0:
- Possible to use string ``NONE`` or Python ``None`` to disable the
  functionality.
- Return Python ``None`` when the functionality was disabled earlier.
  In previous versions special value ``No Keyword`` was returned and
  it could not be used to restore the original state.</doc>
</kw>
<kw name="Reload Page" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="524">
<arguments>
</arguments>
<doc>Simulates user reloading page.</doc>
</kw>
<kw name="Remove Location Strategy" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="1166">
<arguments>
<arg>strategy_name: str</arg>
</arguments>
<doc>Removes a previously added custom location strategy.

See `Custom locators` for information on how to create and use
custom strategies.</doc>
</kw>
<kw name="Scroll Element Into View" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="768">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Scrolls the element identified by ``locator`` into view.

See the `Locating elements` section for details about the locator
syntax.

New in Selenium2Library 3.2.0</doc>
</kw>
<kw name="Select All From List" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="193">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Selects all options from multi-selection list ``locator``.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Select Checkbox" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="104">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Selects the checkbox identified by ``locator``.

Does nothing if checkbox is already selected.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Select Frame" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="25">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Sets frame identified by ``locator`` as the current frame.

See the `Locating elements` section for details about the locator
syntax.

Works both with frames and iframes. Use `Unselect Frame` to cancel
the frame selection and return to the main frame.

Example:
| `Select Frame`   | top-frame | # Select frame with id or name 'top-frame'   |
| `Click Link`     | example   | # Click link 'example' in the selected frame |
| `Unselect Frame` |           | # Back to main frame.                        |
| `Select Frame`   | //iframe[@name='xxx'] | # Select frame using xpath       |</doc>
</kw>
<kw name="Select From List By Index" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="209">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>*indexes: str</arg>
</arguments>
<doc>Selects options from selection list ``locator`` by ``indexes``.

Indexes of list options start from 0.

If more than one option is given for a single-selection list,
the last value will be selected. With multi-selection lists all
specified options are selected, but possible old selections are
not cleared.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Select From List By Label" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="256">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>*labels: str</arg>
</arguments>
<doc>Selects options from selection list ``locator`` by ``labels``.

If more than one option is given for a single-selection list,
the last value will be selected. With multi-selection lists all
specified options are selected, but possible old selections are
not cleared.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Select From List By Value" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="234">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>*values: str</arg>
</arguments>
<doc>Selects options from selection list ``locator`` by ``values``.

If more than one option is given for a single-selection list,
the last value will be selected. With multi-selection lists all
specified options are selected, but possible old selections are
not cleared.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Select Radio Button" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="198">
<arguments>
<arg>group_name: str</arg>
<arg>value: str</arg>
</arguments>
<doc>Sets the radio button group ``group_name`` to ``value``.

The radio button to be selected is located by two arguments:
- ``group_name`` is the name of the radio button group.
- ``value`` is the ``id`` or ``value`` attribute of the actual
  radio button.

Examples:
| `Select Radio Button` | size    | XL    |
| `Select Radio Button` | contact | email |</doc>
</kw>
<kw name="Set Action Chain Delay" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="640">
<arguments>
<arg>value: timedelta</arg>
</arguments>
<doc>Sets the duration of delay in ActionChains() used by Selenium2Library.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.

Value is always stored as milliseconds internally.

The previous value is returned and can be used to restore
the original value later if needed.</doc>
</kw>
<kw name="Set Browser Implicit Wait" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="662">
<arguments>
<arg>value: timedelta</arg>
</arguments>
<doc>Sets the implicit wait value used by Selenium.

Same as `Set Selenium Implicit Wait` but only affects the current
browser.</doc>
</kw>
<kw name="Set Focus To Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="756">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Sets the focus to the element identified by ``locator``.

See the `Locating elements` section for details about the locator
syntax.

Prior to Selenium2Library 3.0 this keyword was named `Focus`.</doc>
</kw>
<kw name="Set Screenshot Directory" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\screenshot.py" lineno="35">
<arguments>
<arg>path: typing.Optional[str]</arg>
</arguments>
<doc>Sets the directory for captured screenshots.

``path`` argument specifies the absolute path to a directory where
the screenshots should be written to. If the directory does not
exist, it will be created. The directory can also be set when
`importing` the library. If it is not configured anywhere,
screenshots are saved to the same directory where Robot Framework's
log file is written.

If ``path`` equals to EMBED (case insensitive) and
`Capture Page Screenshot` or `capture Element Screenshot` keywords
filename argument is not changed from the default value, then
the page or element screenshot is embedded as Base64 image to
the log.html.

The previous value is returned and can be used to restore
the original value later if needed.

Returning the previous value is new in Selenium2Library 3.0.
The persist argument was removed in Selenium2Library 3.2 and
EMBED is new in Selenium2Library 4.2.</doc>
</kw>
<kw name="Set Selenium Implicit Wait" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="614">
<arguments>
<arg>value: timedelta</arg>
</arguments>
<doc>Sets the implicit wait value used by Selenium.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.
The previous value is returned and can be used to restore
the original value later if needed.

This keyword sets the implicit wait for all opened browsers.
Use `Set Browser Implicit Wait` to set it only to the current
browser.

See the `Implicit wait` section above for more information.

Example:
| ${orig wait} = | `Set Selenium Implicit Wait` | 10 seconds |
| `Perform AJAX call that is slow` |
| `Set Selenium Implicit Wait` | ${orig wait} |</doc>
</kw>
<kw name="Set Selenium Page Load Timeout" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="671">
<arguments>
<arg>value: timedelta</arg>
</arguments>
<doc>Sets the page load timeout value used by Selenium.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.
The previous value is returned and can be used to restore
the original value later if needed.

In contrast to `Set Selenium Timeout` and `Set Selenium Implicit Wait`,
this keywords sets the time for the Webdriver to wait until the page
is loaded before raising a timeout exception.

See the `Page load` section above for more information.

Example:
| ${orig page load timeout} = | `Set Selenium Page Load Timeout` | 30 seconds |
| `Open page that loads slowly` |
| `Set Selenium Page Load Timeout` | ${orig page load timeout} |

New in Selenium2Library 6.1</doc>
</kw>
<kw name="Set Selenium Speed" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="572">
<arguments>
<arg>value: timedelta</arg>
</arguments>
<doc>Sets the delay that is waited after each Selenium command.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.
The previous value is returned and can be used to restore
the original value later if needed.

See the `Selenium Speed` section above for more information.

Example:
| `Set Selenium Speed` | 0.5 seconds |</doc>
</kw>
<kw name="Set Selenium Timeout" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="592">
<arguments>
<arg>value: timedelta</arg>
</arguments>
<doc>Sets the timeout that is used by various keywords.

The value can be given as a number that is considered to be
seconds or as a human-readable string like ``1 second``.
The previous value is returned and can be used to restore
the original value later if needed.

See the `Timeout` section above for more information.

Example:
| ${orig timeout} = | `Set Selenium Timeout` | 15 seconds |
| `Open page that loads slowly` |
| `Set Selenium Timeout` | ${orig timeout} |</doc>
</kw>
<kw name="Set Window Position" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="274">
<arguments>
<arg>x: int</arg>
<arg>y: int</arg>
</arguments>
<doc>Sets window position using ``x`` and ``y`` coordinates.

The position is relative to the top left corner of the screen,
but some browsers exclude possible task bar set by the operating
system from the calculation. The actual position may thus be
different with different browsers.

Values can be given using strings containing numbers or by using
actual numbers. See also `Get Window Position`.

Example:
| `Set Window Position` | 100 | 200 |</doc>
</kw>
<kw name="Set Window Size" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="217">
<arguments>
<arg>width: int</arg>
<arg>height: int</arg>
<arg>inner: bool = False</arg>
</arguments>
<doc>Sets current windows size to given ``width`` and ``height``.

Values can be given using strings containing numbers or by using
actual numbers. See also `Get Window Size`.

Browsers have a limit on their minimum size. Trying to set them
smaller will cause the actual size to be bigger than the requested
size.

If ``inner`` parameter is set to True, keyword sets the necessary
window width and height to have the desired HTML DOM _window.innerWidth_
and _window.innerHeight_. See `Boolean arguments` for more details on how to set boolean
arguments.

The ``inner`` argument is new since Selenium2Library 4.0.

This ``inner`` argument does not support Frames. If a frame is selected,
switch to default before running this.

Example:
| `Set Window Size` | 800 | 600 |      |
| `Set Window Size` | 800 | 600 | True |</doc>
</kw>
<kw name="Simulate Event" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\element.py" lineno="882">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>event: str</arg>
</arguments>
<doc>Simulates ``event`` on the element identified by ``locator``.

This keyword is useful if element has ``OnEvent`` handler that
needs to be explicitly invoked.

See the `Locating elements` section for details about the locator
syntax.

Prior to Selenium2Library 3.0 this keyword was named `Simulate`.</doc>
</kw>
<kw name="Submit Form" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="29">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, NoneType, str] = None</arg>
</arguments>
<doc>Submits a form identified by ``locator``.

If ``locator`` is not given, first form on the page is submitted.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Switch Browser" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="334">
<arguments>
<arg>index_or_alias: str</arg>
</arguments>
<doc>Switches between active browsers using ``index_or_alias``.

Indices are returned by the `Open Browser` keyword and aliases can
be given to it explicitly. Indices start from 1.

Example:
| `Open Browser`        | http://google.com | ff       |
| `Location Should Be`  | http://google.com |          |
| `Open Browser`        | http://yahoo.com  | ie       | alias=second |
| `Location Should Be`  | http://yahoo.com  |          |
| `Switch Browser`      | 1                 | # index  |
| `Page Should Contain` | I'm feeling lucky |          |
| `Switch Browser`      | second            | # alias  |
| `Page Should Contain` | More Yahoo!       |          |
| `Close All Browsers`  |                   |          |

Above example expects that there was no other open browsers when
opening the first one because it used index ``1`` when switching to
it later. If you are not sure about that, you can store the index
into a variable as below.

| ${index} =         | `Open Browser` | http://google.com |
| # Do something ... |                |                   |
| `Switch Browser`   | ${index}       |                   |</doc>
</kw>
<kw name="Switch Window" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\window.py" lineno="33">
<arguments>
<arg>locator: typing.Union[list, str] = MAIN</arg>
<arg>timeout: typing.Optional[str] = None</arg>
<arg>browser: str = CURRENT</arg>
</arguments>
<doc>Switches to browser window matching ``locator``.

If the window is found, all subsequent commands use the selected
window, until this keyword is used again. If the window is not
found, this keyword fails. The previous windows handle is returned
and can be used to switch back to it later.

Notice that alerts should be handled with
`Handle Alert` or other alert related keywords.

The ``locator`` can be specified using different strategies somewhat
similarly as when `locating elements` on pages.

- By default, the ``locator`` is matched against window handle, name,
  title, and URL. Matching is done in that order and the first
  matching window is selected.

- The ``locator`` can specify an explicit strategy by using the format
  ``strategy:value`` (recommended) or ``strategy=value``. Supported
  strategies are ``name``, ``title``, and ``url``. These matches windows
  using their name, title, or URL, respectively. Additionally, ``default``
  can be used to explicitly use the default strategy explained above.

- If the ``locator`` is ``NEW`` (case-insensitive), the latest
  opened window is selected. It is an error if this is the same
  as the current window.

- If the ``locator`` is ``MAIN`` (default, case-insensitive),
  the main window is selected.

- If the ``locator`` is ``CURRENT`` (case-insensitive), nothing is
  done. This effectively just returns the current window handle.

- If the ``locator`` is not a string, it is expected to be a list
  of window handles _to exclude_. Such a list of excluded windows
  can be got from `Get Window Handles` before doing an action that
  opens a new window.

The ``timeout`` is used to specify how long keyword will poll to select
the new window. The ``timeout`` is new in Selenium2Library 3.2.

Example:
| `Click Link`      | popup1      |      | # Open new window |
| `Switch Window`   | example     |      | # Select window using default strategy |
| `Title Should Be` | Pop-up 1    |      |
| `Click Button`    | popup2      |      | # Open another window |
| ${handle} = | `Switch Window`   | NEW  | # Select latest opened window |
| `Title Should Be` | Pop-up 2    |      |
| `Switch Window`   | ${handle}   |      | # Select window using handle |
| `Title Should Be` | Pop-up 1    |      |
| `Switch Window`   | MAIN        |      | # Select the main window |
| `Title Should Be` | Main        |      |
| ${excludes} = | `Get Window Handles` | | # Get list of current windows |
| `Click Link`      | popup3      |      | # Open one more window |
| `Switch Window`   | ${excludes} |      | # Select window using excludes |
| `Title Should Be` | Pop-up 3    |      |

The ``browser`` argument allows with ``index_or_alias`` to implicitly switch to
a specific browser when switching to a window. See `Switch Browser`

- If the ``browser`` is ``CURRENT`` (case-insensitive), no other browser is
  selected.

*NOTE:*

- The ``strategy:value`` syntax is only supported by Selenium2Library
  3.0 and newer.
- Prior to Selenium2Library 3.0 matching windows by name, title
  and URL was case-insensitive.
- Earlier versions supported aliases ``None``, ``null`` and the
  empty string for selecting the main window, and alias ``self``
  for selecting the current window. Support for these aliases was
  removed in Selenium2Library 3.2.</doc>
</kw>
<kw name="Table Cell Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="90">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>row: int</arg>
<arg>column: int</arg>
<arg>expected: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies table cell contains text ``expected``.

See `Get Table Cell` that this keyword uses internally for
an explanation about accepted arguments.</doc>
</kw>
<kw name="Table Column Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="113">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>column: int</arg>
<arg>expected: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies table column contains text ``expected``.

The table is located using the ``locator`` argument and its column
found using ``column``. See the `Locating elements` section for
details about the locator syntax.

Column indexes start from 1. It is possible to refer to columns
from the end by using negative indexes so that -1 is the last column,
-2 is the second last, and so on.

If a table contains cells that span multiple columns, those merged
cells count as a single column.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
</kw>
<kw name="Table Footer Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="144">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies table footer contains text ``expected``.

Any ``&lt;td&gt;`` element inside ``&lt;tfoot&gt;`` element is considered to
be part of the footer.

The table is located using the ``locator`` argument. See the
`Locating elements` section for details about the locator syntax.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
</kw>
<kw name="Table Header Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="169">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies table header contains text ``expected``.

Any ``&lt;th&gt;`` element anywhere in the table is considered to be
part of the header.

The table is located using the ``locator`` argument. See the
`Locating elements` section for details about the locator syntax.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
</kw>
<kw name="Table Row Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="194">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>row: int</arg>
<arg>expected: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies that table row contains text ``expected``.

The table is located using the ``locator`` argument and its column
found using ``column``. See the `Locating elements` section for
details about the locator syntax.

Row indexes start from 1. It is possible to refer to rows
from the end by using negative indexes so that -1 is the last row,
-2 is the second last, and so on.

If a table contains cells that span multiple rows, a match
only occurs for the uppermost row of those merged cells.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
</kw>
<kw name="Table Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\tableelement.py" lineno="225">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: str</arg>
<arg>loglevel: str = TRACE</arg>
</arguments>
<doc>Verifies table contains text ``expected``.

The table is located using the ``locator`` argument. See the
`Locating elements` section for details about the locator syntax.

See `Page Should Contain Element` for an explanation about the
``loglevel`` argument.</doc>
</kw>
<kw name="Textarea Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="382">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: str</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies text area ``locator`` contains text ``expected``.

``message`` can be used to override default error message.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Textarea Value Should Be" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="406">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: str</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies text area ``locator`` has exactly text ``expected``.

``message`` can be used to override default error message.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Textfield Should Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="334">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: str</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies text field ``locator`` contains text ``expected``.

``message`` can be used to override the default error message.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Textfield Value Should Be" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="358">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>expected: str</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies text field ``locator`` has exactly text ``expected``.

``message`` can be used to override default error message.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Title Should Be" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\browsermanagement.py" lineno="497">
<arguments>
<arg>title: str</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Verifies that the current page title equals ``title``.

The ``message`` argument can be used to override the default error
message.

``message`` argument is new in Selenium2Library 3.1.</doc>
</kw>
<kw name="Unselect All From List" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="278">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Unselects all options from multi-selection list ``locator``.

See the `Locating elements` section for details about the locator
syntax.

New in Selenium2Library 3.0.</doc>
</kw>
<kw name="Unselect Checkbox" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\formelement.py" lineno="118">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
</arguments>
<doc>Removes the selection of checkbox identified by ``locator``.

Does nothing if the checkbox is not selected.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Unselect Frame" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\frames.py" lineno="45">
<arguments>
</arguments>
<doc>Sets the main frame as the current frame.

In practice cancels the previous `Select Frame` call.</doc>
</kw>
<kw name="Unselect From List By Index" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="295">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>*indexes: str</arg>
</arguments>
<doc>Unselects options from selection list ``locator`` by ``indexes``.

Indexes of list options start from 0. This keyword works only with
multi-selection lists.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Unselect From List By Label" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="347">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>*labels: str</arg>
</arguments>
<doc>Unselects options from selection list ``locator`` by ``labels``.

This keyword works only with multi-selection lists.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Unselect From List By Value" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\selectelement.py" lineno="322">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>*values: str</arg>
</arguments>
<doc>Unselects options from selection list ``locator`` by ``values``.

This keyword works only with multi-selection lists.

See the `Locating elements` section for details about the locator
syntax.</doc>
</kw>
<kw name="Wait For Condition" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="31">
<arguments>
<arg>condition: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until ``condition`` is true or ``timeout`` expires.

The condition can be arbitrary JavaScript expression but it
must return a value to be evaluated. See `Execute JavaScript` for
information about accessing content on pages.

Fails if the timeout expires before the condition becomes true. See
the `Timeouts` section for more information about using timeouts
and their default value.

``error`` can be used to override the default error message.

Examples:
| `Wait For Condition` | return document.title == "New Title" |
| `Wait For Condition` | return jQuery.active == 0            |
| `Wait For Condition` | style = document.querySelector('h1').style; return style.background == "red" &amp;&amp; style.color == "white" |</doc>
</kw>
<kw name="Wait For Expected Condition" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\expectedconditions.py" lineno="24">
<arguments>
<arg>condition: &lt;module 'string' from 'C:\\Users\\evi1nmk\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\string.py'&gt;</arg>
<arg>*args</arg>
<arg>timeout: typing.Optional[float] = 10</arg>
</arguments>
<doc>Waits until ``condition`` is true or ``timeout`` expires.

The condition must be one of selenium's expected condition which
can be found within the selenium
[https://www.selenium.dev/selenium/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions|Python API]
documentation. The expected condition can written as snake_case
(ex title_is) or it can be space delimited (ex Title Is). Some
conditions require additional arguments or ``args`` which should
be passed along after the expected condition.

Fails if the timeout expires before the condition becomes true.
The default value is 10 seconds.

Examples:
| `Wait For Expected Condition` | alert_is_present |
| `Wait For Expected Condition` |  Title Is  | New Title |

If the expected condition expects a locator then one can pass
as arguments a tuple containing the selenium locator strategies
and the locator.

Example of expected condition expecting locator:
| ${byElem}= |  Evaluate  ("id","added_btn")
| `Wait For Expected Condition` | Presence Of Element Located | ${byElem}</doc>
</kw>
<kw name="Wait Until Element Contains" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="373">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>text: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the element ``locator`` contains ``text``.

Fails if ``timeout`` expires before the text appears. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.</doc>
</kw>
<kw name="Wait Until Element Does Not Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="397">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>text: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the element ``locator`` does not contain ``text``.

Fails if ``timeout`` expires before the text disappears. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.</doc>
</kw>
<kw name="Wait Until Element Is Enabled" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="345">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the element ``locator`` is enabled.

Element is considered enabled if it is not disabled nor read-only.

Fails if ``timeout`` expires before the element is enabled. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.

Considering read-only elements to be disabled is a new feature
in Selenium2Library 3.0.</doc>
</kw>
<kw name="Wait Until Element Is Not Visible" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="322">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the element ``locator`` is not visible.

Fails if ``timeout`` expires before the element is not visible. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.</doc>
</kw>
<kw name="Wait Until Element Is Visible" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="299">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the element ``locator`` is visible.

Fails if ``timeout`` expires before the element is visible. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.</doc>
</kw>
<kw name="Wait Until Location Contains" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="123">
<arguments>
<arg>expected: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the current URL contains ``expected``.

The ``expected`` argument contains the expected value in url.

Fails if ``timeout`` expires before the location contains. See
the `Timeouts` section for more information about using timeouts
and their default value.

The ``message`` argument can be used to override the default error
message.

New in Selenium2Library 4.0</doc>
</kw>
<kw name="Wait Until Location Does Not Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="151">
<arguments>
<arg>location: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the current URL does not contains ``location``.

The ``location`` argument contains value not expected in url.

Fails if ``timeout`` expires before the location not contains. See
the `Timeouts` section for more information about using timeouts
and their default value.

The ``message`` argument can be used to override the default error
message.

New in Selenium2Library 4.3</doc>
</kw>
<kw name="Wait Until Location Is" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="66">
<arguments>
<arg>expected: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the current URL is ``expected``.

The ``expected`` argument is the expected value in url.

Fails if ``timeout`` expires before the location is. See
the `Timeouts` section for more information about using timeouts
and their default value.

The ``message`` argument can be used to override the default error
message.

New in Selenium2Library 4.0</doc>
</kw>
<kw name="Wait Until Location Is Not" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="95">
<arguments>
<arg>location: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>message: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until the current URL is not ``location``.

The ``location`` argument is the unexpected value in url.

Fails if ``timeout`` expires before the location is not. See
the `Timeouts` section for more information about using timeouts
and their default value.

The ``message`` argument can be used to override the default error
message.

New in Selenium2Library 4.3</doc>
</kw>
<kw name="Wait Until Page Contains" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="179">
<arguments>
<arg>text: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until ``text`` appears on the current page.

Fails if ``timeout`` expires before the text appears. See
the `Timeouts` section for more information about using timeouts
and their default value.

``error`` can be used to override the default error message.</doc>
</kw>
<kw name="Wait Until Page Contains Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="223">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
<arg>limit: typing.Optional[int] = None</arg>
</arguments>
<doc>Waits until the element ``locator`` appears on the current page.

Fails if ``timeout`` expires before the element appears. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.

The ``limit`` argument can used to define how many elements the
page should contain. When ``limit`` is `None` (default) page can
contain one or more elements. When limit is a number, page must
contain same number of elements.

``limit`` is new in Selenium2Library 4.4</doc>
</kw>
<kw name="Wait Until Page Does Not Contain" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="201">
<arguments>
<arg>text: str</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
</arguments>
<doc>Waits until ``text`` disappears from the current page.

Fails if ``timeout`` expires before the text disappears. See
the `Timeouts` section for more information about using timeouts
and their default value.

``error`` can be used to override the default error message.</doc>
</kw>
<kw name="Wait Until Page Does Not Contain Element" source="C:\Users\evi1nmk\AppData\Local\Programs\Python\Python312\Lib\site-packages\SeleniumLibrary\keywords\waiting.py" lineno="261">
<arguments>
<arg>locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]</arg>
<arg>timeout: typing.Optional[datetime.timedelta] = None</arg>
<arg>error: typing.Optional[str] = None</arg>
<arg>limit: typing.Optional[int] = None</arg>
</arguments>
<doc>Waits until the element ``locator`` disappears from the current page.

Fails if ``timeout`` expires before the element disappears. See
the `Timeouts` section for more information about using timeouts and
their default value and the `Locating elements` section for details
about the locator syntax.

``error`` can be used to override the default error message.

The ``limit`` argument can used to define how many elements the
page should not contain. When ``limit`` is `None` (default) page can`t
contain any elements. When limit is a number, page must not
contain same number of elements.

``limit`` is new in Selenium2Library 4.4</doc>
</kw>
</keywordspec>